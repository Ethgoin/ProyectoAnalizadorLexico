// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.Map;


@SuppressWarnings("fallthrough")
public class Lexerclass {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\4"+
    "\6\0\1\5\1\6\1\7\1\10\1\11\1\10\1\12"+
    "\1\10\12\13\1\14\1\15\1\16\1\17\1\16\2\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\31\1\40\1\41\1\42\1\43\1\44\1\45\1\31"+
    "\1\46\1\31\1\0\1\47\2\0\1\50\1\0\32\31"+
    "\1\51\1\0\1\52\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\22\16"+
    "\1\1\1\17\1\20\1\0\14\16\1\21\26\16\1\11"+
    "\71\16\1\21\47\16\1\21\43\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\53\0\201\0\53\0\53"+
    "\0\53\0\53\0\254\0\53\0\53\0\53\0\201\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\53\0\53\0\u0408\0\u0433\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1"+
    "\0\u060c\0\u01d9\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u0408\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3"+
    "\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb"+
    "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab"+
    "\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703"+
    "\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b"+
    "\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u10f7\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0"+
    "\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8"+
    "\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\2\26\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\26\1\41\1\26\1\42\1\26\1\43"+
    "\1\44\54\0\1\3\70\0\1\16\45\0\1\45\1\13"+
    "\52\0\1\26\4\0\2\26\1\46\24\26\1\0\1\26"+
    "\15\0\1\26\4\0\20\26\1\47\6\26\1\0\1\26"+
    "\15\0\1\26\4\0\1\50\6\26\1\51\3\26\1\52"+
    "\2\26\1\53\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\4\26\1\54\11\26\1\55\10\26\1\0\1\26\15\0"+
    "\1\26\4\0\13\26\1\56\1\26\1\57\11\26\1\0"+
    "\1\26\15\0\1\26\4\0\1\60\15\26\1\61\10\26"+
    "\1\0\1\26\15\0\1\26\4\0\27\26\1\0\1\26"+
    "\15\0\1\26\4\0\5\26\1\62\7\26\1\63\11\26"+
    "\1\0\1\26\15\0\1\26\4\0\16\26\1\64\10\26"+
    "\1\0\1\26\15\0\1\26\4\0\16\26\1\65\10\26"+
    "\1\0\1\26\15\0\1\26\4\0\23\26\1\66\3\26"+
    "\1\0\1\26\15\0\1\26\4\0\17\26\1\67\7\26"+
    "\1\0\1\26\15\0\1\26\4\0\1\70\17\26\1\71"+
    "\6\26\1\0\1\26\15\0\1\26\4\0\4\26\1\72"+
    "\11\26\1\73\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\1\74\1\26\1\75\1\26\1\76\2\26\1\77\12\26"+
    "\1\100\4\26\1\0\1\26\15\0\1\26\4\0\7\26"+
    "\1\101\6\26\1\102\1\26\1\103\2\26\1\104\3\26"+
    "\1\0\1\26\15\0\1\26\4\0\15\26\1\105\1\26"+
    "\1\106\7\26\1\0\1\26\15\0\1\26\4\0\1\107"+
    "\6\26\1\110\17\26\1\0\1\26\11\0\1\11\56\0"+
    "\1\111\52\0\1\26\4\0\22\26\1\112\4\26\1\0"+
    "\1\26\15\0\1\26\4\0\4\26\1\113\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\13\26\1\114\13\26\1\0"+
    "\1\26\15\0\1\26\4\0\1\115\3\26\1\116\22\26"+
    "\1\0\1\26\15\0\1\26\4\0\16\26\1\117\10\26"+
    "\1\0\1\26\15\0\1\26\4\0\15\26\1\120\1\26"+
    "\1\121\7\26\1\0\1\26\15\0\1\26\4\0\1\20"+
    "\1\26\1\122\10\26\1\123\13\26\1\0\1\26\15\0"+
    "\1\26\4\0\25\26\1\124\1\26\1\0\1\26\15\0"+
    "\1\26\4\0\21\26\1\125\5\26\1\0\1\26\15\0"+
    "\1\26\4\0\3\26\1\62\23\26\1\0\1\26\15\0"+
    "\1\26\4\0\13\26\1\56\13\26\1\0\1\26\15\0"+
    "\1\26\4\0\20\26\1\62\6\26\1\0\1\26\15\0"+
    "\1\26\4\0\2\26\1\122\5\26\1\126\16\26\1\0"+
    "\1\26\15\0\1\26\4\0\2\26\1\127\3\26\1\62"+
    "\16\26\1\130\1\26\1\0\1\26\15\0\1\26\4\0"+
    "\24\26\1\131\2\26\1\0\1\26\15\0\1\26\4\0"+
    "\13\26\1\132\13\26\1\0\1\26\15\0\1\26\4\0"+
    "\4\26\1\133\22\26\1\0\1\26\15\0\1\26\4\0"+
    "\23\26\1\56\3\26\1\0\1\26\15\0\1\26\4\0"+
    "\10\26\1\134\16\26\1\0\1\26\15\0\1\26\4\0"+
    "\1\135\1\136\13\26\1\137\3\26\1\140\2\26\1\141"+
    "\2\26\1\0\1\26\15\0\1\26\4\0\22\26\1\142"+
    "\4\26\1\0\1\26\15\0\1\26\4\0\24\26\1\143"+
    "\2\26\1\0\1\26\15\0\1\26\4\0\1\144\26\26"+
    "\1\0\1\26\15\0\1\26\4\0\22\26\1\145\4\26"+
    "\1\0\1\26\15\0\1\26\4\0\23\26\1\146\3\26"+
    "\1\0\1\26\15\0\1\26\4\0\1\147\15\26\1\150"+
    "\10\26\1\0\1\26\15\0\1\26\4\0\4\26\1\144"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\6\26\1\151"+
    "\20\26\1\0\1\26\15\0\1\26\4\0\23\26\1\125"+
    "\3\26\1\0\1\26\15\0\1\26\4\0\20\26\1\152"+
    "\6\26\1\0\1\26\15\0\1\26\4\0\13\26\1\153"+
    "\13\26\1\0\1\26\15\0\1\26\4\0\13\26\1\154"+
    "\13\26\1\0\1\26\15\0\1\26\4\0\10\26\1\126"+
    "\16\26\1\0\1\26\15\0\1\26\4\0\10\26\1\155"+
    "\16\26\1\0\1\26\15\0\1\26\4\0\10\26\1\156"+
    "\16\26\1\0\1\26\15\0\1\26\4\0\1\127\26\26"+
    "\1\0\1\26\15\0\1\26\4\0\10\26\1\157\16\26"+
    "\1\0\1\26\15\0\1\26\4\0\20\26\1\160\6\26"+
    "\1\0\1\26\15\0\1\26\4\0\2\26\1\161\24\26"+
    "\1\0\1\26\15\0\1\26\4\0\21\26\1\162\5\26"+
    "\1\0\1\26\15\0\1\26\4\0\22\26\1\163\4\26"+
    "\1\0\1\26\15\0\1\26\4\0\26\26\1\164\1\0"+
    "\1\26\15\0\1\26\4\0\20\26\1\165\6\26\1\0"+
    "\1\26\15\0\1\26\4\0\4\26\1\166\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\15\26\1\167\11\26\1\0"+
    "\1\26\15\0\1\26\4\0\4\26\1\62\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\22\26\1\62\4\26\1\0"+
    "\1\26\15\0\1\26\4\0\12\26\1\62\14\26\1\0"+
    "\1\26\15\0\1\26\4\0\27\26\1\0\1\170\15\0"+
    "\1\26\4\0\4\26\1\171\22\26\1\0\1\26\15\0"+
    "\1\26\4\0\13\26\1\62\13\26\1\0\1\26\15\0"+
    "\1\26\4\0\15\26\1\172\11\26\1\0\1\26\15\0"+
    "\1\26\4\0\15\26\1\126\11\26\1\0\1\26\15\0"+
    "\1\26\4\0\3\26\1\173\23\26\1\0\1\26\15\0"+
    "\1\26\4\0\16\26\1\174\10\26\1\0\1\26\15\0"+
    "\1\26\4\0\1\175\26\26\1\0\1\26\15\0\1\26"+
    "\4\0\4\26\1\126\16\26\1\176\3\26\1\0\1\26"+
    "\15\0\1\26\4\0\4\26\1\177\22\26\1\0\1\26"+
    "\15\0\1\26\4\0\1\200\26\26\1\0\1\26\15\0"+
    "\1\26\4\0\4\26\1\164\22\26\1\0\1\26\15\0"+
    "\1\26\4\0\15\26\1\62\11\26\1\0\1\26\15\0"+
    "\1\26\4\0\27\26\1\0\1\201\15\0\1\26\4\0"+
    "\22\26\1\202\4\26\1\0\1\26\15\0\1\26\4\0"+
    "\20\26\1\126\6\26\1\0\1\26\15\0\1\26\4\0"+
    "\17\26\1\203\7\26\1\0\1\26\15\0\1\26\4\0"+
    "\6\26\1\204\20\26\1\0\1\26\15\0\1\26\4\0"+
    "\15\26\1\205\11\26\1\0\1\26\15\0\1\26\4\0"+
    "\16\26\1\206\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\16\26\1\207\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\13\26\1\125\13\26\1\0\1\26\15\0\1\26\4\0"+
    "\24\26\1\210\2\26\1\0\1\26\15\0\1\26\4\0"+
    "\1\26\1\211\25\26\1\0\1\26\15\0\1\26\4\0"+
    "\6\26\1\212\20\26\1\0\1\26\15\0\1\26\4\0"+
    "\12\26\1\130\14\26\1\0\1\26\15\0\1\26\4\0"+
    "\4\26\1\172\22\26\1\0\1\26\15\0\1\26\4\0"+
    "\10\26\1\213\16\26\1\0\1\26\15\0\1\26\4\0"+
    "\27\26\1\0\1\214\15\0\1\26\4\0\4\26\1\215"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\22\26\1\143"+
    "\4\26\1\0\1\26\15\0\1\26\4\0\13\26\1\216"+
    "\13\26\1\0\1\26\15\0\1\26\4\0\1\26\1\217"+
    "\25\26\1\0\1\26\15\0\1\26\4\0\27\26\1\0"+
    "\1\220\15\0\1\26\4\0\27\26\1\0\1\221\15\0"+
    "\1\26\4\0\27\26\1\0\1\222\15\0\1\26\4\0"+
    "\16\26\1\126\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\14\26\1\143\12\26\1\0\1\26\15\0\1\26\4\0"+
    "\14\26\1\125\12\26\1\0\1\26\15\0\1\26\4\0"+
    "\20\26\1\56\6\26\1\0\1\26\15\0\1\26\4\0"+
    "\22\26\1\125\4\26\1\0\1\26\15\0\1\26\4\0"+
    "\21\26\1\223\5\26\1\0\1\26\15\0\1\26\4\0"+
    "\3\26\1\224\23\26\1\0\1\225\15\0\1\26\4\0"+
    "\27\26\1\0\1\226\15\0\1\26\4\0\13\26\1\227"+
    "\13\26\1\0\1\26\15\0\1\26\4\0\27\26\1\0"+
    "\1\230\15\0\1\26\4\0\2\26\1\127\24\26\1\0"+
    "\1\26\15\0\1\26\4\0\1\231\26\26\1\0\1\26"+
    "\15\0\1\26\4\0\1\232\26\26\1\0\1\26\15\0"+
    "\1\26\4\0\20\26\1\142\6\26\1\0\1\26\15\0"+
    "\1\26\4\0\4\26\1\130\22\26\1\0\1\26\15\0"+
    "\1\26\4\0\15\26\1\103\11\26\1\0\1\26\15\0"+
    "\1\26\4\0\5\26\1\110\21\26\1\0\1\26\15\0"+
    "\1\26\4\0\1\233\26\26\1\0\1\26\15\0\1\26"+
    "\4\0\16\26\1\234\10\26\1\0\1\26\15\0\1\26"+
    "\4\0\1\235\26\26\1\0\1\26\15\0\1\26\4\0"+
    "\1\26\1\236\3\26\1\237\14\26\1\240\4\26\1\0"+
    "\1\26\15\0\1\26\4\0\3\26\1\241\23\26\1\0"+
    "\1\26\15\0\1\26\4\0\21\26\1\242\5\26\1\0"+
    "\1\26\15\0\1\26\4\0\17\26\1\243\7\26\1\0"+
    "\1\26\15\0\1\26\4\0\16\26\1\244\10\26\1\0"+
    "\1\26\15\0\1\26\4\0\16\26\1\245\10\26\1\0"+
    "\1\26\15\0\1\26\4\0\10\26\1\246\16\26\1\0"+
    "\1\26\15\0\1\26\4\0\4\26\1\247\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\3\26\1\224\7\26\1\250"+
    "\4\26\1\251\2\26\1\252\3\26\1\0\1\26\15\0"+
    "\1\26\4\0\3\26\1\253\23\26\1\0\1\26\15\0"+
    "\1\26\4\0\22\26\1\254\4\26\1\0\1\26\15\0"+
    "\1\26\4\0\21\26\1\255\5\26\1\0\1\26\15\0"+
    "\1\26\4\0\1\57\26\26\1\0\1\26\15\0\1\26"+
    "\4\0\22\26\1\256\4\26\1\0\1\26\15\0\1\26"+
    "\4\0\1\257\26\26\1\0\1\26\15\0\1\26\4\0"+
    "\16\26\1\260\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\16\26\1\62\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\16\26\1\261\10\26\1\0\1\26\15\0\1\26\4\0"+
    "\4\26\1\262\22\26\1\0\1\26\15\0\1\26\4\0"+
    "\4\26\1\263\22\26\1\0\1\26\15\0\1\26\4\0"+
    "\25\26\1\144\1\26\1\0\1\26\15\0\1\26\4\0"+
    "\5\26\1\264\21\26\1\0\1\26\15\0\1\26\4\0"+
    "\14\26\1\265\12\26\1\0\1\26\15\0\1\26\4\0"+
    "\27\26\1\0\1\266\15\0\1\26\4\0\4\26\1\267"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\10\26\1\270"+
    "\16\26\1\0\1\26\15\0\1\26\4\0\17\26\1\62"+
    "\7\26\1\0\1\26\15\0\1\26\4\0\4\26\1\271"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\4\26\1\145"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\22\26\1\272"+
    "\4\26\1\0\1\26\15\0\1\26\4\0\2\26\1\273"+
    "\24\26\1\0\1\26\15\0\1\26\4\0\20\26\1\274"+
    "\6\26\1\0\1\26\15\0\1\26\4\0\16\26\1\61"+
    "\10\26\1\0\1\26\15\0\1\26\4\0\15\26\1\275"+
    "\11\26\1\0\1\26\15\0\1\26\4\0\4\26\1\57"+
    "\22\26\1\0\1\26\15\0\1\26\4\0\5\26\1\62"+
    "\21\26\1\0\1\26\15\0\1\26\4\0\14\26\1\276"+
    "\12\26\1\0\1\26\15\0\1\26\4\0\13\26\1\251"+
    "\13\26\1\0\1\26\15\0\1\26\4\0\5\26\1\126"+
    "\21\26\1\0\1\26\15\0\1\26\4\0\6\26\1\277"+
    "\20\26\1\0\1\26\15\0\1\26\4\0\27\26\1\0"+
    "\1\300\15\0\1\26\4\0\4\26\1\301\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\12\26\1\274\14\26\1\0"+
    "\1\26\15\0\1\26\4\0\25\26\1\302\1\26\1\0"+
    "\1\26\15\0\1\26\4\0\21\26\1\261\5\26\1\0"+
    "\1\26\15\0\1\26\4\0\4\26\1\303\22\26\1\0"+
    "\1\26\15\0\1\26\4\0\7\26\1\126\17\26\1\0"+
    "\1\26\15\0\1\26\4\0\1\304\20\26\1\242\5\26"+
    "\1\0\1\26\15\0\1\26\4\0\20\26\1\305\6\26"+
    "\1\0\1\26\15\0\1\26\4\0\1\306\26\26\1\0"+
    "\1\26\15\0\1\26\4\0\3\26\1\307\23\26\1\0"+
    "\1\26\15\0\1\26\4\0\13\26\1\310\13\26\1\0"+
    "\1\26\15\0\1\26\4\0\26\26\1\62\1\0\1\26"+
    "\15\0\1\26\4\0\20\26\1\57\6\26\1\0\1\26"+
    "\15\0\1\26\4\0\10\26\1\311\16\26\1\0\1\26"+
    "\15\0\1\26\4\0\1\312\26\26\1\0\1\26\15\0"+
    "\1\26\4\0\1\313\26\26\1\0\1\26\15\0\1\26"+
    "\4\0\20\26\1\314\6\26\1\0\1\26\15\0\1\26"+
    "\4\0\22\26\1\315\4\26\1\0\1\26\15\0\1\26"+
    "\4\0\14\26\1\62\12\26\1\0\1\26\15\0\1\26"+
    "\4\0\4\26\1\316\22\26\1\0\1\26\15\0\1\26"+
    "\4\0\13\26\1\305\13\26\1\0\1\26\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8213];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\4\11\1\1\3\11"+
    "\24\1\2\11\1\0\251\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private BufferedWriter writer;
private int lineNumber = 1; // Contador de líneas
private int columnNumber = 1; // Contador de columnas
private int cont = 0; // Contador de tokens procesados

private static final Map<String, String> palabrasReservadas = Map.ofEntries(
    Map.entry("MOVE_FORWARD", "MOVE_FORWARD"),
    Map.entry("MOVE_BACKWARD", "MOVE_BACKWARD"),
    Map.entry("TURN_LEFT", "TURN_LEFT"),
    Map.entry("TURN_RIGHT", "TURN_RIGHT"),
    Map.entry("TURN_UP", "SUBIR"),
    Map.entry("TURN_DOWN", "BAJAR"),
    Map.entry("MOVE_TO", "MOVER_A"),
    Map.entry("ROTATE", "ROTAR"),
    Map.entry("STOP", "STOP"),
    Map.entry("STOP_IMMEDIATELY", "DETENER_INMEDIATAMENTE"),
    Map.entry("REVERSE", "INVERTIR"),
    Map.entry("WAIT", "ESPERAR"),
    Map.entry("INCREASE_SPEED", "AUMENTAR_VELOCIDAD"),
    Map.entry("DECREASE_SPEED", "DISMINUIR_VELOCIDAD"),
    Map.entry("SET_SPEED", "ESTABLECER_VELOCIDAD"),
    Map.entry("READ_SENSOR", "READ_SENSOR"),
    Map.entry("ACTIVATE_SENSOR", "ACTIVATE_SENSOR"),
    Map.entry("DEACTIVATE_SENSOR", "DEACTIVATE_SENSOR"),
    Map.entry("START", "START"),
    Map.entry("SHUTDOWN", "SHUTDOWN"),
    Map.entry("PAUSE", "PAUSE"),
    Map.entry("RESUME", "RESUME"),
    Map.entry("INIT", "INICIALIZAR"),
    Map.entry("RESET", "REINICIAR"),
    Map.entry("REBOOT", "REARRANCAR"),
    Map.entry("CALIBRATE", "CALIBRAR"),
    Map.entry("SHUT_OFF", "APAGAR_COMPLETAMENTE"),
    Map.entry("ACTIVATE_ALARM", "ACTIVAR_ALARMA"),
    Map.entry("DEACTIVATE_ALARM", "DESACTIVAR_ALARMA"),
    Map.entry("CHECK_BATTERY", "VERIFICAR_BATERIA"),
    Map.entry("CHARGE_BATTERY", "CARGAR_BATERIA"),
    Map.entry("LOW_BATTERY", "BATERIA_BAJA"),
    Map.entry("IF", "IF"),
    Map.entry("THEN", "THEN"),
    Map.entry("ELSE", "ELSE"),
    Map.entry("WHILE", "WHILE"),
    Map.entry("FOR", "FOR"),
    Map.entry("BREAK", "INTERRUMPIR"),
    Map.entry("CONTINUE", "CONTINUAR"),
    Map.entry("UPLOAD_FILE", "SUBIR_ARCHIVO"),
    Map.entry("DELETE_FILE", "ELIMINAR_ARCHIVO"),
    Map.entry("COPY_FILE", "COPIAR_ARCHIVO"),
    Map.entry("RENAME_FILE", "RENOMBRAR_ARCHIVO"),
    Map.entry("SAVE_FILE", "GUARDAR_ARCHIVO"),
    Map.entry("LOG", "REGISTRAR"),
    Map.entry("PRINT", "IMPRIMIR"),
    Map.entry("SCAN", "ESCANEAR"),
    Map.entry("UPLOAD", "SUBIR"),
    Map.entry("DOWNLOAD", "DESCARGAR"),
    Map.entry("TRUE", "VERDADERO"),
    Map.entry("FALSE", "FALSO"),
    Map.entry("NULL", "NULO"),
    Map.entry("OPEN_DOOR", "ABRIR_PUERTA"),
    Map.entry("CLOSE_DOOR", "CERRAR_PUERTA"),
    Map.entry("UNLOCK", "DESBLOQUEAR"),
    Map.entry("LOCK", "BLOQUEAR"),
    Map.entry("TOGGLE_LIGHT", "INTERRUMPIR_LUZ")
);


public boolean isEOF() {
    return zzAtEOF;
}

public Lexerclass(Reader in, BufferedWriter writer) {
    this.zzReader = in;
    this.writer = writer;
}

// Escribe un token en el archivo de salida
private void escribeToken(String tipo, String lexema) {
    try {
        writer.write(cont + ": (" + tipo + ", \"" + lexema + "\") en línea " + lineNumber + ", columna " + columnNumber + "\n");
        columnNumber += yytext().length(); // Actualiza la columna según el tamaño del lexema
        cont++;
    } catch (IOException e) {
        e.printStackTrace();
    }
}

// Reporta un error en el archivo de salida
private void reportaError(String lexema, String mensaje) {
    try {
        writer.write(cont + ": ERROR: Línea " + lineNumber + ", Columna " + columnNumber + ": " + mensaje + " '" + lexema + "'\n");
        columnNumber += lexema.length(); // Actualiza la columna
        cont++;
    } catch (IOException e) {
        e.printStackTrace();
    }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexerclass(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { reportaError(yytext(), "Símbolo desconocido");
            }
          // fall through
          case 18: break;
          case 2:
            { columnNumber += yylength(); /* Ignorar espacios */
            }
          // fall through
          case 19: break;
          case 3:
            { lineNumber++; columnNumber = 1;
            }
          // fall through
          case 20: break;
          case 4:
            { System.out.print(yytext());
            }
          // fall through
          case 21: break;
          case 5:
            { escribeToken(yytext(), "PARENTESIS_ABIERTO");
            }
          // fall through
          case 22: break;
          case 6:
            { escribeToken(yytext(), "PARENTESIS_CERRADO");
            }
          // fall through
          case 23: break;
          case 7:
            { escribeToken("OPERADOR_ARITMETICO", yytext());
            }
          // fall through
          case 24: break;
          case 8:
            { escribeToken(yytext(), "COMA");
            }
          // fall through
          case 25: break;
          case 9:
            { escribeToken("NUMERO", yytext());
            }
          // fall through
          case 26: break;
          case 10:
            { escribeToken(yytext(), "DOS_PUNTOS");
            }
          // fall through
          case 27: break;
          case 11:
            { escribeToken(yytext(), "PUNTO_Y_COMA");
            }
          // fall through
          case 28: break;
          case 12:
            { escribeToken("OPERADOR_RELACIONAL", yytext());
            }
          // fall through
          case 29: break;
          case 13:
            { escribeToken("OPERADOR_ASIGNACION", yytext());
            }
          // fall through
          case 30: break;
          case 14:
            { if (palabrasReservadas.containsKey(yytext())) {
        escribeToken(palabrasReservadas.get(yytext()), yytext());
    } else {
        escribeToken("IDENTIFICADOR", yytext());
    }
            }
          // fall through
          case 31: break;
          case 15:
            { escribeToken(yytext(), "LLAVE_ABIERTA");
            }
          // fall through
          case 32: break;
          case 16:
            { escribeToken(yytext(), "LLAVE_CERRADA");
            }
          // fall through
          case 33: break;
          case 17:
            { escribeToken("PALABRA_RESERVADA", yytext());
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexerclass [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexerclass scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexerclass(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
