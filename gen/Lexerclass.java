// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

import java.io.BufferedWriter; 
import java.io.File;
import java.io.FileWriter; 
import java.io.IOException;
import java.io.Reader; 

@SuppressWarnings("fallthrough")
public class Lexerclass {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\23\0\1\2\1\3\5\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\12\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\51\1\52\1\0\1\53"+
    "\2\0\1\54\1\0\22\51\1\55\7\51\1\56\1\0"+
    "\1\57\7\0\1\1\u01a2\0\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\21\21\1\1\1\22\1\23\1\24\1\0"+
    "\1\25\21\21\1\26\16\21\1\27\1\30\22\21\1\31"+
    "\4\21\1\32\51\21\1\33\12\21\1\34\12\21\1\35"+
    "\1\21\1\36\10\21\1\37\21\21\1\40\7\21\1\41"+
    "\6\21\1\42\1\21\1\43\1\44\3\21\1\45\42\21"+
    "\1\46\32\21\1\47\6\21\1\50\23\21\1\51\1\52"+
    "\13\21\1\53\2\21\1\54\2\21\1\55\7\21\1\56"+
    "\15\21\1\57\4\21\1\60\13\21\1\61\1\62\2\21"+
    "\1\63\1\21\1\64\27\21\1\65\2\21\1\66\14\21"+
    "\1\67\5\21\1\70\1\71\2\21\1\72\3\21\1\73"+
    "\4\21\1\74\14\21\1\75\10\21\1\76\11\21\1\77"+
    "\1\21\1\100\1\21\1\101\3\21\1\102\1\103\12\21"+
    "\1\104\10\21\1\105\1\106\10\21\1\107\5\21\1\110"+
    "\1\111\3\21\1\112\1\113\1\21\1\114\5\21\1\115"+
    "\1\21\1\116\1\21\1\117\1\21\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\60\0\140\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\220\0\60\0\60\0\60"+
    "\0\300\0\60\0\360\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0"+
    "\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\60\0\60\0\60\0\u0450"+
    "\0\60\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u0240\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0420\0\u0450\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0240\0\u0db0\0\u0de0"+
    "\0\u0e10\0\u0e40\0\u0240\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u0240\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u0240"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\u0240\0\u19e0\0\u0240\0\u1a10\0\u1a40\0\u1a70"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u0240\0\u1b90\0\u1bc0"+
    "\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40"+
    "\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u0240"+
    "\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u0240"+
    "\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u0240\0\u2130"+
    "\0\u0240\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u0240\0\u2220\0\u2250"+
    "\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0"+
    "\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550"+
    "\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0"+
    "\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850"+
    "\0\u0240\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0"+
    "\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20"+
    "\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0"+
    "\0\u2cd0\0\u2d00\0\u2d30\0\u0240\0\u2d60\0\u2d90\0\u2dc0\0\u2df0"+
    "\0\u2e20\0\u2e50\0\u0240\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40"+
    "\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\u3090\0\u30c0"+
    "\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0\0\u31e0\0\u0240\0\u0240"+
    "\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360"+
    "\0\u3390\0\u33c0\0\u33f0\0\u0240\0\u3420\0\u3450\0\u0240\0\u3480"+
    "\0\u34b0\0\u0240\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0"+
    "\0\u3600\0\u0240\0\u3630\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u3720"+
    "\0\u3750\0\u3780\0\u37b0\0\u37e0\0\u3810\0\u3840\0\u3870\0\u0240"+
    "\0\u38a0\0\u38d0\0\u3900\0\u3930\0\u0240\0\u3960\0\u3990\0\u39c0"+
    "\0\u39f0\0\u3a20\0\u3a50\0\u3a80\0\u3ab0\0\u3ae0\0\u3b10\0\u3b40"+
    "\0\u0240\0\u0240\0\u3b70\0\u3ba0\0\u0240\0\u3bd0\0\u0240\0\u3c00"+
    "\0\u3c30\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80"+
    "\0\u3db0\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00"+
    "\0\u3f30\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u0240\0\u4050"+
    "\0\u4080\0\u0240\0\u40b0\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0"+
    "\0\u41d0\0\u4200\0\u4230\0\u4260\0\u4290\0\u42c0\0\u0240\0\u42f0"+
    "\0\u4320\0\u4350\0\u4380\0\u43b0\0\u0240\0\u43e0\0\u4410\0\u4440"+
    "\0\u0240\0\u4470\0\u44a0\0\u44d0\0\u0240\0\u4500\0\u4530\0\u4560"+
    "\0\u4590\0\u0240\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0"+
    "\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u0240\0\u4800"+
    "\0\u4830\0\u4860\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950\0\u0240"+
    "\0\u4980\0\u49b0\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0"+
    "\0\u4b00\0\u0240\0\u4b30\0\u0240\0\u4b60\0\u0240\0\u4b90\0\u4bc0"+
    "\0\u4bf0\0\u0240\0\u0240\0\u4c20\0\u4c50\0\u4c80\0\u4cb0\0\u4ce0"+
    "\0\u4d10\0\u4d40\0\u4d70\0\u4da0\0\u4dd0\0\u0240\0\u4e00\0\u4e30"+
    "\0\u4e60\0\u4e90\0\u4ec0\0\u4ef0\0\u4f20\0\u4f50\0\u0240\0\u0240"+
    "\0\u4f80\0\u4fb0\0\u4fe0\0\u5010\0\u5040\0\u5070\0\u50a0\0\u50d0"+
    "\0\u0240\0\u5100\0\u5130\0\u5160\0\u5190\0\u51c0\0\u0240\0\u0240"+
    "\0\u51f0\0\u5220\0\u5250\0\u0240\0\u0240\0\u5280\0\u0240\0\u52b0"+
    "\0\u52e0\0\u5310\0\u5340\0\u5370\0\u0240\0\u53a0\0\u0240\0\u53d0"+
    "\0\u0240\0\u5400\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\3\32\1\34\1\35\1\32\1\36"+
    "\1\32\1\37\1\40\1\41\1\32\1\42\1\43\2\32"+
    "\1\44\2\32\1\45\1\46\100\0\1\47\51\0\1\50"+
    "\1\0\1\15\63\0\1\51\53\0\1\32\5\0\1\32"+
    "\1\52\1\53\14\32\1\54\4\32\1\55\4\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\56\12\32\1\57\15\32"+
    "\1\0\2\32\16\0\1\32\5\0\1\60\3\32\1\61"+
    "\11\32\1\62\12\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\63\3\32\1\64\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\13\32\1\65\1\32\1\66\4\32\1\67"+
    "\6\32\1\0\2\32\16\0\1\32\5\0\1\70\15\32"+
    "\1\71\12\32\1\0\2\32\16\0\1\32\5\0\24\32"+
    "\1\72\4\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\2\32\16\0\1\32\5\0\5\32\1\73\6\32"+
    "\1\74\1\75\13\32\1\0\2\32\16\0\1\32\5\0"+
    "\16\32\1\76\12\32\1\0\2\32\16\0\1\32\5\0"+
    "\24\32\1\77\4\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\100\30\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\101\11\32\1\102\12\32\1\0\2\32\16\0\1\32"+
    "\5\0\7\32\1\103\13\32\1\104\1\105\4\32\1\0"+
    "\2\32\16\0\1\32\5\0\7\32\1\106\14\32\1\107"+
    "\4\32\1\0\2\32\16\0\1\32\5\0\4\32\1\110"+
    "\24\32\1\0\2\32\16\0\1\32\5\0\7\32\1\111"+
    "\21\32\1\0\2\32\57\0\1\112\16\0\1\113\57\0"+
    "\1\32\5\0\21\32\1\114\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\23\32\1\115\5\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\116\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\14\32\1\117\14\32\1\0\2\32\16\0\1\32"+
    "\5\0\11\32\1\120\11\32\1\121\5\32\1\0\2\32"+
    "\16\0\1\32\5\0\16\32\1\122\12\32\1\0\2\32"+
    "\16\0\1\32\5\0\13\32\1\123\5\32\1\124\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\125\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\15\32\1\126\1\32"+
    "\1\127\11\32\1\0\2\32\16\0\1\32\5\0\1\130"+
    "\21\32\1\131\1\132\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\22\32\1\133\6\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\134\11\32\1\135\6\32\1\0\2\32"+
    "\16\0\1\32\5\0\3\32\1\136\25\32\1\0\2\32"+
    "\16\0\1\32\5\0\2\32\1\137\14\32\1\140\3\32"+
    "\1\141\5\32\1\0\2\32\16\0\1\32\5\0\13\32"+
    "\1\142\15\32\1\0\2\32\16\0\1\32\5\0\21\32"+
    "\1\143\7\32\1\0\2\32\16\0\1\32\5\0\1\144"+
    "\30\32\1\0\2\32\16\0\1\32\5\0\17\32\1\145"+
    "\11\32\1\0\2\32\16\0\1\32\5\0\10\32\1\146"+
    "\12\32\1\147\1\32\1\150\3\32\1\0\2\32\16\0"+
    "\1\32\5\0\25\32\1\151\3\32\1\0\2\32\16\0"+
    "\1\32\5\0\13\32\1\152\15\32\1\0\2\32\16\0"+
    "\1\32\5\0\24\32\1\153\4\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\154\5\32\1\155\1\32\1\156\4\32"+
    "\1\157\4\32\1\160\6\32\1\0\2\32\16\0\1\32"+
    "\5\0\23\32\1\161\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\24\32\1\162\4\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\163\15\32\1\164\12\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\32\1\165\27\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\166\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\167\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\170\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\171\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\172\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\173\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\6\32\1\174\22\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\175\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\176\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\4\32\1\177\24\32\1\0\2\32\16\0\1\32"+
    "\5\0\20\32\1\200\10\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\201\20\32\1\0\2\32\16\0\1\32"+
    "\5\0\6\32\1\202\22\32\1\0\2\32\16\0\1\32"+
    "\5\0\21\32\1\203\7\32\1\0\2\32\16\0\1\32"+
    "\5\0\23\32\1\204\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\205\20\32\1\0\2\32\16\0\1\32"+
    "\5\0\2\32\1\206\26\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\207\1\210\1\211\26\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\212\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\14\32\1\213\14\32\1\0\2\32\16\0"+
    "\1\32\5\0\14\32\1\214\14\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\215\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\216\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\4\32\1\217\24\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\220\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\221\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\222\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\223\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\2\32\1\224\26\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\225\24\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\226\24\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\227\24\32\1\0\2\32\16\0\1\32\5\0"+
    "\16\32\1\230\12\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\231\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\3\32\1\232\15\32\1\233\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\234\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\235\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\16\32\1\236\12\32\1\0\2\32\16\0"+
    "\1\32\5\0\24\32\1\237\4\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\240\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\23\32\1\241\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\21\32\1\242\7\32\1\0\2\32\16\0\1\32"+
    "\5\0\17\32\1\243\11\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\244\20\32\1\0\2\32\16\0\1\32"+
    "\5\0\15\32\1\245\13\32\1\0\2\32\16\0\1\32"+
    "\5\0\15\32\1\246\13\32\1\0\2\32\16\0\1\32"+
    "\5\0\3\32\1\247\4\32\1\250\20\32\1\0\2\32"+
    "\16\0\1\32\5\0\13\32\1\251\15\32\1\0\2\32"+
    "\16\0\1\32\5\0\21\32\1\252\7\32\1\0\2\32"+
    "\16\0\1\32\5\0\25\32\1\253\3\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\254\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\255\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\256\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\257\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\24\32\1\260\4\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\32\1\261\27\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\262\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\263\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\264\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\265\30\32\1\0\2\32\16\0\1\32\5\0\23\32"+
    "\1\266\5\32\1\0\2\32\16\0\1\32\5\0\2\32"+
    "\1\267\26\32\1\0\2\32\16\0\1\32\5\0\13\32"+
    "\1\270\15\32\1\0\2\32\16\0\1\32\5\0\1\271"+
    "\30\32\1\0\2\32\16\0\1\32\5\0\15\32\1\272"+
    "\13\32\1\0\2\32\16\0\1\32\5\0\10\32\1\273"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\10\32\1\274"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\15\32\1\275"+
    "\13\32\1\0\2\32\16\0\1\32\5\0\21\32\1\276"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\1\32\1\277"+
    "\27\32\1\0\2\32\16\0\1\32\5\0\16\32\1\300"+
    "\12\32\1\0\2\32\16\0\1\32\5\0\3\32\1\301"+
    "\25\32\1\0\2\32\16\0\1\32\5\0\10\32\1\302"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\10\32\1\303"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\21\32\1\304"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\21\32\1\305"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\21\32\1\306"+
    "\7\32\1\0\1\307\1\32\16\0\1\32\5\0\4\32"+
    "\1\310\24\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\311\1\32\16\0\1\32\5\0\21\32\1\312"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\22\32\1\313"+
    "\6\32\1\0\2\32\16\0\1\32\5\0\10\32\1\314"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\14\32\1\315"+
    "\14\32\1\0\2\32\16\0\1\32\5\0\14\32\1\316"+
    "\14\32\1\0\2\32\16\0\1\32\5\0\21\32\1\317"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\3\32\1\320"+
    "\25\32\1\0\2\32\16\0\1\32\5\0\23\32\1\321"+
    "\5\32\1\0\2\32\16\0\1\32\5\0\21\32\1\322"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\31\32\1\0"+
    "\1\323\1\32\16\0\1\32\5\0\1\324\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\5\32\1\325\23\32\1\0"+
    "\2\32\16\0\1\32\5\0\4\32\1\326\24\32\1\0"+
    "\2\32\16\0\1\32\5\0\31\32\1\0\1\327\1\32"+
    "\16\0\1\32\5\0\1\330\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\331\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\23\32\1\332\5\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\333\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\334\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\335\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\336\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\337\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\340\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\341\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\342\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\23\32\1\343\5\32\1\0\2\32\16\0"+
    "\1\32\5\0\16\32\1\344\12\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\345\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\346\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\347\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\350\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\4\32\1\351\24\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\352\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\13\32\1\353\15\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\354\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\14\32\1\355\14\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\356\30\32\1\0\2\32\16\0\1\32\5\0\21\32"+
    "\1\357\7\32\1\0\2\32\16\0\1\32\5\0\23\32"+
    "\1\360\5\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\361\1\32\16\0\1\32\5\0\1\32\1\362"+
    "\3\32\1\363\23\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\364\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\365\30\32\1\0\2\32\16\0\1\32\5\0\23\32"+
    "\1\366\5\32\1\0\2\32\16\0\1\32\5\0\2\32"+
    "\1\367\26\32\1\0\2\32\16\0\1\32\5\0\1\32"+
    "\1\370\27\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\371\24\32\1\0\2\32\16\0\1\32\5\0\16\32"+
    "\1\372\12\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\373\1\32\16\0\1\32\5\0\13\32\1\374"+
    "\5\32\1\375\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\3\32\1\376\25\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\377\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\17\32\1\u0100\11\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0101\1\32\1\u0102\5\32\1\0\2\32\16\0"+
    "\1\32\5\0\31\32\1\0\1\u0103\1\32\16\0\1\32"+
    "\5\0\1\u0104\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u0105\30\32\1\0\2\32\16\0\1\32\5\0\1\u0106"+
    "\30\32\1\0\2\32\16\0\1\32\5\0\1\u0107\30\32"+
    "\1\0\2\32\16\0\1\32\5\0\31\32\1\0\1\u0108"+
    "\1\32\16\0\1\32\5\0\31\32\1\0\1\u0109\1\32"+
    "\16\0\1\32\5\0\24\32\1\u010a\4\32\1\0\2\32"+
    "\16\0\1\32\5\0\31\32\1\0\1\u010b\1\32\16\0"+
    "\1\32\5\0\25\32\1\u010c\3\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\u010d\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\20\32\1\u010e\10\32\1\0\2\32\16\0"+
    "\1\32\5\0\6\32\1\u010f\22\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\u0110\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\24\32\1\u0111\4\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u0112\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u0113\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0114\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\u0115\24\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0116\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\u0117\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\13\32\1\u0118\15\32\1\0\2\32\16\0\1\32\5\0"+
    "\24\32\1\u0119\4\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\u011a\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u011b\30\32\1\0\2\32\16\0\1\32\5\0\1\u011c"+
    "\30\32\1\0\2\32\16\0\1\32\5\0\16\32\1\u011d"+
    "\12\32\1\0\2\32\16\0\1\32\5\0\4\32\1\u011e"+
    "\24\32\1\0\2\32\16\0\1\32\5\0\15\32\1\u011f"+
    "\13\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u0120"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\10\32\1\u0121"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u0122"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\26\32\1\u0123"+
    "\2\32\1\0\2\32\16\0\1\32\5\0\1\u0124\30\32"+
    "\1\0\2\32\16\0\1\32\5\0\4\32\1\u0125\24\32"+
    "\1\0\2\32\16\0\1\32\5\0\10\32\1\u0126\20\32"+
    "\1\0\2\32\16\0\1\32\5\0\4\32\1\u0127\24\32"+
    "\1\0\2\32\16\0\1\32\5\0\2\32\1\u0128\26\32"+
    "\1\0\2\32\16\0\1\32\5\0\24\32\1\u0129\4\32"+
    "\1\0\2\32\16\0\1\32\5\0\31\32\1\0\1\u012a"+
    "\1\32\16\0\1\32\5\0\4\32\1\u012b\24\32\1\0"+
    "\2\32\16\0\1\32\5\0\2\32\1\u012c\26\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u012d\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\31\32\1\0\1\u012e\1\32"+
    "\16\0\1\32\5\0\21\32\1\u012f\7\32\1\0\2\32"+
    "\16\0\1\32\5\0\21\32\1\u0130\7\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\32\1\u0131\27\32\1\0\2\32"+
    "\16\0\1\32\5\0\17\32\1\u0132\11\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u0133\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u0134\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u0135\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\25\32\1\u0136\3\32\1\0\2\32\16\0\1\32\5\0"+
    "\24\32\1\u0137\4\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u0138\30\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\u0139\1\32\16\0\1\32\5\0\10\32\1\u013a"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u013b"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u013c"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\2\32\1\u013d"+
    "\26\32\1\0\2\32\16\0\1\32\5\0\31\32\1\0"+
    "\1\u013e\1\32\16\0\1\32\5\0\21\32\1\u013f\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\10\32\1\u0140\20\32"+
    "\1\0\2\32\16\0\1\32\5\0\14\32\1\u0141\14\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u0142\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\2\32\1\u0143\26\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u0144\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\15\32\1\u0145\13\32"+
    "\1\0\2\32\16\0\1\32\5\0\2\32\1\u0146\26\32"+
    "\1\0\2\32\16\0\1\32\5\0\1\u0147\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\u0148\30\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u0149\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\u014a\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\u014b\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\5\32\1\u014c\23\32\1\0\2\32\16\0"+
    "\1\32\5\0\6\32\1\u014d\22\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\u014e\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u014f\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\4\32\1\u0150\24\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u0151\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\31\32\1\0\1\u0152\1\32\16\0\1\32\5\0\16\32"+
    "\1\u0153\12\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\u0154\1\32\16\0\1\32\5\0\1\32\1\u0155"+
    "\27\32\1\0\2\32\16\0\1\32\5\0\1\u0156\30\32"+
    "\1\0\2\32\16\0\1\32\5\0\24\32\1\u0157\4\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u0158\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u0159\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\23\32\1\u015a\5\32"+
    "\1\0\2\32\16\0\1\32\5\0\1\u015b\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\4\32\1\u015c\24\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u015d\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\10\32\1\u015e\20\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u015f\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\31\32\1\0\1\u0160\1\32"+
    "\16\0\1\32\5\0\4\32\1\u0161\24\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u0162\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\30\32\1\u0163\1\0\2\32\16\0\1\32"+
    "\5\0\17\32\1\u0164\11\32\1\0\2\32\16\0\1\32"+
    "\5\0\12\32\1\u0165\16\32\1\0\2\32\16\0\1\32"+
    "\5\0\26\32\1\u0166\2\32\1\0\2\32\16\0\1\32"+
    "\5\0\22\32\1\u0167\6\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u0168\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0169\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u016a\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u016b\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\2\32\1\u016c\26\32\1\0\2\32\16\0\1\32\5\0"+
    "\23\32\1\u016d\5\32\1\0\2\32\16\0\1\32\5\0"+
    "\7\32\1\u016e\21\32\1\0\2\32\16\0\1\32\5\0"+
    "\16\32\1\u016f\12\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0170\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u0171\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\13\32\1\u0172\15\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\u0173\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\14\32\1\u0174\14\32\1\0\2\32\16\0\1\32\5\0"+
    "\25\32\1\u0175\3\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u0176\30\32\1\0\2\32\16\0\1\32\5\0\23\32"+
    "\1\u0177\5\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u0178\24\32\1\0\2\32\16\0\1\32\5\0\2\32"+
    "\1\u0179\26\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u017a\24\32\1\0\2\32\16\0\1\32\5\0\21\32"+
    "\1\u017b\7\32\1\0\2\32\16\0\1\32\5\0\1\u017c"+
    "\30\32\1\0\2\32\16\0\1\32\5\0\15\32\1\u017d"+
    "\13\32\1\0\2\32\16\0\1\32\5\0\31\32\1\0"+
    "\1\u017e\1\32\16\0\1\32\5\0\1\u017f\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u0180\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u0181\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\u0182\30\32\1\0\2\32"+
    "\16\0\1\32\5\0\10\32\1\u0183\20\32\1\0\2\32"+
    "\16\0\1\32\5\0\26\32\1\u0184\2\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u0185\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\16\32\1\u0186\12\32\1\0\2\32\16\0"+
    "\1\32\5\0\21\32\1\u0187\7\32\1\0\2\32\16\0"+
    "\1\32\5\0\31\32\1\0\1\u0188\1\32\16\0\1\32"+
    "\5\0\7\32\1\u0189\21\32\1\0\2\32\16\0\1\32"+
    "\5\0\23\32\1\u018a\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\31\32\1\0\1\u018b\1\32\16\0\1\32\5\0"+
    "\23\32\1\u018c\5\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u018d\30\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u018e\24\32\1\0\2\32\16\0\1\32\5\0\17\32"+
    "\1\u018f\11\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u0190\24\32\1\0\2\32\16\0\1\32\5\0\11\32"+
    "\1\u0191\17\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u0192\24\32\1\0\2\32\16\0\1\32\5\0\21\32"+
    "\1\u0193\7\32\1\0\2\32\16\0\1\32\5\0\7\32"+
    "\1\u0194\21\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\u0195\1\32\16\0\1\32\5\0\31\32\1\0"+
    "\1\u0196\1\32\16\0\1\32\5\0\21\32\1\u0197\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\14\32\1\u0198\14\32"+
    "\1\0\2\32\16\0\1\32\5\0\25\32\1\u0199\3\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u019a\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\31\32\1\0\1\u019b"+
    "\1\32\16\0\1\32\5\0\2\32\1\u019c\26\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u019d\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\21\32\1\u019e\7\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\u019f\30\32\1\0\2\32"+
    "\16\0\1\32\5\0\21\32\1\u01a0\7\32\1\0\2\32"+
    "\16\0\1\32\5\0\21\32\1\u01a1\7\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u01a2\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\10\32\1\u01a3\20\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\32\1\u01a4\27\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u01a5\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\21\32\1\u01a6\7\32\1\0\2\32\16\0\1\32"+
    "\5\0\15\32\1\u01a7\13\32\1\0\2\32\16\0\1\32"+
    "\5\0\13\32\1\u01a8\15\32\1\0\2\32\16\0\1\32"+
    "\5\0\13\32\1\u01a9\15\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u01aa\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u01ab\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\23\32\1\u01ac\5\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\u01ad\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\u01ae\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u01af\30\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u01b0\24\32\1\0\2\32\16\0\1\32\5\0\4\32"+
    "\1\u01b1\24\32\1\0\2\32\16\0\1\32\5\0\2\32"+
    "\1\u01b2\26\32\1\0\2\32\16\0\1\32\5\0\25\32"+
    "\1\u01b3\3\32\1\0\2\32\16\0\1\32\5\0\7\32"+
    "\1\u01b4\21\32\1\0\2\32\16\0\1\32\5\0\31\32"+
    "\1\0\1\u01b5\1\32\16\0\1\32\5\0\21\32\1\u01b6"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\3\32\1\u01b7"+
    "\25\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u01b8"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\25\32\1\u01b9"+
    "\3\32\1\0\2\32\16\0\1\32\5\0\1\u01ba\30\32"+
    "\1\0\2\32\16\0\1\32\5\0\14\32\1\u01bb\14\32"+
    "\1\0\2\32\16\0\1\32\5\0\22\32\1\u01bc\6\32"+
    "\1\0\2\32\16\0\1\32\5\0\4\32\1\u01bd\24\32"+
    "\1\0\2\32\16\0\1\32\5\0\16\32\1\u01be\12\32"+
    "\1\0\2\32\16\0\1\32\5\0\10\32\1\u01bf\20\32"+
    "\1\0\2\32\16\0\1\32\5\0\1\u01c0\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\25\32\1\u01c1\3\32\1\0"+
    "\2\32\16\0\1\32\5\0\4\32\1\u01c2\24\32\1\0"+
    "\2\32\16\0\1\32\5\0\13\32\1\u01c3\15\32\1\0"+
    "\2\32\16\0\1\32\5\0\3\32\1\u01c4\25\32\1\0"+
    "\2\32\16\0\1\32\5\0\13\32\1\u01c5\15\32\1\0"+
    "\2\32\16\0\1\32\5\0\7\32\1\u01c6\21\32\1\0"+
    "\2\32\16\0\1\32\5\0\4\32\1\u01c7\24\32\1\0"+
    "\2\32\16\0\1\32\5\0\10\32\1\u01c8\20\32\1\0"+
    "\2\32\16\0\1\32\5\0\13\32\1\u01c9\15\32\1\0"+
    "\2\32\16\0\1\32\5\0\3\32\1\u01ca\25\32\1\0"+
    "\2\32\16\0\1\32\5\0\2\32\1\u01cb\26\32\1\0"+
    "\2\32\16\0\1\32\5\0\16\32\1\u01cc\12\32\1\0"+
    "\2\32\16\0\1\32\5\0\23\32\1\u01cd\5\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\u01ce\30\32\1\0\2\32"+
    "\16\0\1\32\5\0\16\32\1\u01cf\12\32\1\0\2\32"+
    "\16\0\1\32\5\0\23\32\1\u01d0\5\32\1\0\2\32"+
    "\16\0\1\32\5\0\2\32\1\u01d1\26\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u01d2\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\16\32\1\u01d3\12\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\u01d4\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u01d5\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\u01d6\20\32\1\0\2\32\16\0\1\32"+
    "\5\0\16\32\1\u01d7\12\32\1\0\2\32\16\0\1\32"+
    "\5\0\10\32\1\u01d8\20\32\1\0\2\32\16\0\1\32"+
    "\5\0\13\32\1\u01d9\15\32\1\0\2\32\16\0\1\32"+
    "\5\0\25\32\1\u01da\3\32\1\0\2\32\16\0\1\32"+
    "\5\0\24\32\1\u01db\4\32\1\0\2\32\16\0\1\32"+
    "\5\0\7\32\1\u01dc\21\32\1\0\2\32\16\0\1\32"+
    "\5\0\4\32\1\u01dd\24\32\1\0\2\32\16\0\1\32"+
    "\5\0\21\32\1\u01de\7\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u01df\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\10\32\1\u01e0\20\32\1\0\2\32\16\0\1\32\5\0"+
    "\22\32\1\u01e1\6\32\1\0\2\32\16\0\1\32\5\0"+
    "\21\32\1\u01e2\7\32\1\0\2\32\16\0\1\32\5\0"+
    "\1\u01e3\30\32\1\0\2\32\16\0\1\32\5\0\2\32"+
    "\1\u01e4\26\32\1\0\2\32\16\0\1\32\5\0\25\32"+
    "\1\u01e5\3\32\1\0\2\32\16\0\1\32\5\0\16\32"+
    "\1\u01e6\12\32\1\0\2\32\16\0\1\32\5\0\16\32"+
    "\1\u01e7\12\32\1\0\2\32\16\0\1\32\5\0\30\32"+
    "\1\u01e8\1\0\2\32\16\0\1\32\5\0\10\32\1\u01e9"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\21\32\1\u01ea"+
    "\7\32\1\0\2\32\16\0\1\32\5\0\14\32\1\u01eb"+
    "\14\32\1\0\2\32\16\0\1\32\5\0\3\32\1\u01ec"+
    "\25\32\1\0\2\32\16\0\1\32\5\0\16\32\1\u01ed"+
    "\12\32\1\0\2\32\16\0\1\32\5\0\14\32\1\u01ee"+
    "\14\32\1\0\2\32\16\0\1\32\5\0\23\32\1\u01ef"+
    "\5\32\1\0\2\32\16\0\1\32\5\0\10\32\1\u01f0"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\16\32\1\u01f1"+
    "\12\32\1\0\2\32\16\0\1\32\5\0\2\32\1\u01f2"+
    "\26\32\1\0\2\32\16\0\1\32\5\0\25\32\1\u01f3"+
    "\3\32\1\0\2\32\16\0\1\32\5\0\10\32\1\u01f4"+
    "\20\32\1\0\2\32\16\0\1\32\5\0\4\32\1\u01f5"+
    "\24\32\1\0\2\32\16\0\1\32\5\0\1\u01f6\30\32"+
    "\1\0\2\32\16\0\1\32\5\0\21\32\1\u01f7\7\32"+
    "\1\0\2\32\16\0\1\32\5\0\1\u01f8\30\32\1\0"+
    "\2\32\16\0\1\32\5\0\1\u01f9\30\32\1\0\2\32"+
    "\16\0\1\32\5\0\3\32\1\u01fa\25\32\1\0\2\32"+
    "\16\0\1\32\5\0\10\32\1\u01fb\20\32\1\0\2\32"+
    "\16\0\1\32\5\0\16\32\1\u01fc\12\32\1\0\2\32"+
    "\16\0\1\32\5\0\1\u01fd\30\32\1\0\2\32\16\0"+
    "\1\32\5\0\15\32\1\u01fe\13\32\1\0\2\32\16\0"+
    "\1\32\5\0\3\32\1\u01ff\25\32\1\0\2\32\16\0"+
    "\1\32\5\0\14\32\1\u0200\14\32\1\0\2\32\16\0"+
    "\1\32\5\0\1\u0201\30\32\1\0\2\32\16\0\1\32"+
    "\5\0\3\32\1\u0202\25\32\1\0\2\32\16\0\1\32"+
    "\5\0\23\32\1\u0203\5\32\1\0\2\32\16\0\1\32"+
    "\5\0\4\32\1\u0204\24\32\1\0\2\32\16\0\1\32"+
    "\5\0\3\32\1\u0205\25\32\1\0\2\32\16\0\1\32"+
    "\5\0\1\u0206\30\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\u0207\24\32\1\0\2\32\16\0\1\32\5\0"+
    "\15\32\1\u0208\13\32\1\0\2\32\16\0\1\32\5\0"+
    "\3\32\1\u0209\25\32\1\0\2\32\16\0\1\32\5\0"+
    "\23\32\1\u020a\5\32\1\0\2\32\16\0\1\32\5\0"+
    "\4\32\1\u020b\24\32\1\0\2\32\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21552];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\10\11\1\1\3\11\1\1\1\11"+
    "\22\1\3\11\1\0\1\11\u01e2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private BufferedWriter writer;
    public boolean isEOF() {
    return (zzAtEOF);
}

public Lexerclass (Reader in, BufferedWriter writer) {
this.zzReader = in;
this.writer = writer;
}

private void escribeToken(String lexema, String token) {
try {
writer.write(lexema + " - " + token + "\n");
} catch (IOException e) { 
e.printStackTrace();
}
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexerclass(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Simbolo desconocido: " + yytext());
            }
          // fall through
          case 81: break;
          case 2:
            { System.out.print(yytext());
            }
          // fall through
          case 82: break;
          case 3:
            { escribeToken(yytext(), "COMILLAS");
            }
          // fall through
          case 83: break;
          case 4:
            { escribeToken(yytext(), "PARENTESIS_ABIERTO");
            }
          // fall through
          case 84: break;
          case 5:
            { escribeToken(yytext(), "PARENTESIS_CERRADO");
            }
          // fall through
          case 85: break;
          case 6:
            { escribeToken(yytext(), "MULTIPLICACION");
            }
          // fall through
          case 86: break;
          case 7:
            { escribeToken(yytext(), "SUMA");
            }
          // fall through
          case 87: break;
          case 8:
            { escribeToken(yytext(), "COMA");
            }
          // fall through
          case 88: break;
          case 9:
            { escribeToken(yytext(), "RESTA");
            }
          // fall through
          case 89: break;
          case 10:
            { escribeToken(yytext(), "DIVISION");
            }
          // fall through
          case 90: break;
          case 11:
            { escribeToken(yytext(), "NUMERO_ENTERO");
            }
          // fall through
          case 91: break;
          case 12:
            { escribeToken(yytext(), "DOS_PUNTOS");
            }
          // fall through
          case 92: break;
          case 13:
            { escribeToken(yytext(), "PUNTO_Y_COMA");
            }
          // fall through
          case 93: break;
          case 14:
            { escribeToken(yytext(), "MENOR_QUE");
            }
          // fall through
          case 94: break;
          case 15:
            { escribeToken(yytext(), "ASIGNACION");
            }
          // fall through
          case 95: break;
          case 16:
            { escribeToken(yytext(), "MAYOR_QUE");
            }
          // fall through
          case 96: break;
          case 17:
            { escribeToken(yytext(), "IDENTIFICADOR");
            }
          // fall through
          case 97: break;
          case 18:
            { escribeToken(yytext(), "LLAVE_ABIERTA");
            }
          // fall through
          case 98: break;
          case 19:
            { escribeToken(yytext(), "LLAVE_CERRADA");
            }
          // fall through
          case 99: break;
          case 20:
            { escribeToken(yytext(), "NO_IGUAL");
            }
          // fall through
          case 100: break;
          case 21:
            { escribeToken(yytext(), "IGUAL_A");
            }
          // fall through
          case 101: break;
          case 22:
            { escribeToken(yytext(), "IF");
            }
          // fall through
          case 102: break;
          case 23:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 103: break;
          case 24:
            { escribeToken(yytext(), "NUMERO_FLOTANTE");
            }
          // fall through
          case 104: break;
          case 25:
            { escribeToken(yytext(), "END");
            }
          // fall through
          case 105: break;
          case 26:
            { escribeToken(yytext(), "FOR");
            }
          // fall through
          case 106: break;
          case 27:
            { escribeToken(yytext(), "ELSE");
            }
          // fall through
          case 107: break;
          case 28:
            { escribeToken(yytext(), "NULO");
            }
          // fall through
          case 108: break;
          case 29:
            { escribeToken(yytext(), "PARAR");
            }
          // fall through
          case 109: break;
          case 30:
            { escribeToken(yytext(), "THEN");
            }
          // fall through
          case 110: break;
          case 31:
            { escribeToken(yytext(), "BAJAR");
            }
          // fall through
          case 111: break;
          case 32:
            { escribeToken(yytext(), "FALSO");
            }
          // fall through
          case 112: break;
          case 33:
            { escribeToken(yytext(), "PAUSA");
            }
          // fall through
          case 113: break;
          case 34:
            { escribeToken(yytext(), "ROTAR");
            }
          // fall through
          case 114: break;
          case 35:
            { escribeToken(yytext(), "INICIAR");
            }
          // fall through
          case 115: break;
          case 36:
            { escribeToken(yytext(), "SUBIR");
            }
          // fall through
          case 116: break;
          case 37:
            { escribeToken(yytext(), "WHILE");
            }
          // fall through
          case 117: break;
          case 38:
            { escribeToken(yytext(), "RESUME");
            }
          // fall through
          case 118: break;
          case 39:
            { escribeToken(yytext(), "ESPERAR");
            }
          // fall through
          case 119: break;
          case 40:
            { escribeToken(yytext(), "MOVER_A");
            }
          // fall through
          case 120: break;
          case 41:
            { escribeToken(yytext(), "BLOQUEAR");
            }
          // fall through
          case 121: break;
          case 42:
            { escribeToken(yytext(), "CALIBRAR");
            }
          // fall through
          case 122: break;
          case 43:
            { escribeToken(yytext(), "ESCANEAR");
            }
          // fall through
          case 123: break;
          case 44:
            { escribeToken(yytext(), "IMPRIMIR");
            }
          // fall through
          case 124: break;
          case 45:
            { escribeToken(yytext(), "INVERTIR");
            }
          // fall through
          case 125: break;
          case 46:
            { escribeToken(yytext(), "SHUTDOWN");
            }
          // fall through
          case 126: break;
          case 47:
            { escribeToken(yytext(), "CONTINUAR");
            }
          // fall through
          case 127: break;
          case 48:
            { escribeToken(yytext(), "DESCARGAR");
            }
          // fall through
          case 128: break;
          case 49:
            { escribeToken(yytext(), "REGISTRAR");
            }
          // fall through
          case 129: break;
          case 50:
            { escribeToken(yytext(), "REINICIAR");
            }
          // fall through
          case 130: break;
          case 51:
            { escribeToken(yytext(), "TURN_LEFT");
            }
          // fall through
          case 131: break;
          case 52:
            { escribeToken(yytext(), "VERDADERO");
            }
          // fall through
          case 132: break;
          case 53:
            { escribeToken(yytext(), "REARRANCAR");
            }
          // fall through
          case 133: break;
          case 54:
            { escribeToken(yytext(), "TURN_RIGHT");
            }
          // fall through
          case 134: break;
          case 55:
            { escribeToken(yytext(), "DESBLOQUEAR");
            }
          // fall through
          case 135: break;
          case 56:
            { escribeToken(yytext(), "INICIALIZAR");
            }
          // fall through
          case 136: break;
          case 57:
            { escribeToken(yytext(), "INTERRUMPIR");
            }
          // fall through
          case 137: break;
          case 58:
            { escribeToken(yytext(), "LEER_SENSOR");
            }
          // fall through
          case 138: break;
          case 59:
            { escribeToken(yytext(), "ABRIR_PUERTA");
            }
          // fall through
          case 139: break;
          case 60:
            { escribeToken(yytext(), "BATERIA_BAJA");
            }
          // fall through
          case 140: break;
          case 61:
            { escribeToken(yytext(), "MOVE_FORWARD");
            }
          // fall through
          case 141: break;
          case 62:
            { escribeToken(yytext(), "CERRAR_PUERTA");
            }
          // fall through
          case 142: break;
          case 63:
            { escribeToken(yytext(), "MOVE_BACKWARD");
            }
          // fall through
          case 143: break;
          case 64:
            { escribeToken(yytext(), "SUBIR_ARCHIVO");
            }
          // fall through
          case 144: break;
          case 65:
            { escribeToken(yytext(), "ACTIVAR_ALARMA");
            }
          // fall through
          case 145: break;
          case 66:
            { escribeToken(yytext(), "CARGAR_BATERIA");
            }
          // fall through
          case 146: break;
          case 67:
            { escribeToken(yytext(), "COPIAR_ARCHIVO");
            }
          // fall through
          case 147: break;
          case 68:
            { escribeToken(yytext(), "ACTIVAR_SENSOR");
            }
          // fall through
          case 148: break;
          case 69:
            { escribeToken(yytext(), "GUARDAR_ARCHIVO");
            }
          // fall through
          case 149: break;
          case 70:
            { escribeToken(yytext(), "INTERRUMPIR_LUZ");
            }
          // fall through
          case 150: break;
          case 71:
            { escribeToken(yytext(), "ELIMINAR_ARCHIVO");
            }
          // fall through
          case 151: break;
          case 72:
            { escribeToken(yytext(), "DESACTIVAR_SENSOR");
            }
          // fall through
          case 152: break;
          case 73:
            { escribeToken(yytext(), "DESACTIVAR_ALARMA");
            }
          // fall through
          case 153: break;
          case 74:
            { escribeToken(yytext(), "RENOMBRAR_ARCHIVO");
            }
          // fall through
          case 154: break;
          case 75:
            { escribeToken(yytext(), "VERIFICAR_BATERIA");
            }
          // fall through
          case 155: break;
          case 76:
            { escribeToken(yytext(), "AUMENTAR_VELOCIDAD");
            }
          // fall through
          case 156: break;
          case 77:
            { escribeToken(yytext(), "DISMINUIR_VELOCIDAD");
            }
          // fall through
          case 157: break;
          case 78:
            { escribeToken(yytext(), "APAGAR_COMPLETAMENTE");
            }
          // fall through
          case 158: break;
          case 79:
            { escribeToken(yytext(), "ESTABLECER_VELOCIDAD");
            }
          // fall through
          case 159: break;
          case 80:
            { escribeToken(yytext(), "DETENER_INMEDIATAMENTE");
            }
          // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexerclass [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexerclass scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexerclass(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
