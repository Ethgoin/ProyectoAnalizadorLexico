// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer.flex

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.Map;


@SuppressWarnings("fallthrough")
public class Lexerclass {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\4"+
    "\6\0\1\5\1\6\1\7\1\10\1\11\1\10\1\12"+
    "\1\10\12\13\1\14\1\15\1\16\1\17\1\16\2\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\2\47"+
    "\1\50\1\0\1\51\2\0\1\52\1\0\32\47\1\53"+
    "\1\0\1\54\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\21\16"+
    "\1\1\1\17\1\20\1\0\21\16\1\21\16\16\1\11"+
    "\26\16\1\22\63\16\1\23\23\16\1\24\21\16\1\25"+
    "\7\16\1\26\6\16\1\27\1\16\1\30\1\31\3\16"+
    "\1\32\42\16\1\33\32\16\1\34\6\16\1\35\23\16"+
    "\1\36\1\37\13\16\1\40\2\16\1\41\2\16\1\42"+
    "\7\16\1\43\15\16\1\44\4\16\1\45\12\16\1\46"+
    "\1\47\2\16\1\50\26\16\1\51\16\16\1\52\5\16"+
    "\1\53\1\54\1\55\3\16\1\56\4\16\1\57\23\16"+
    "\1\60\12\16\1\61\1\16\1\62\3\16\1\63\1\64"+
    "\12\16\1\65\10\16\1\66\1\67\10\16\1\70\5\16"+
    "\1\71\1\72\3\16\1\73\1\74\1\16\1\75\5\16"+
    "\1\76\1\16\1\77\1\16\1\100\1\16\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\55\0\207\0\55\0\55"+
    "\0\55\0\55\0\264\0\55\0\55\0\55\0\207\0\341"+
    "\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\55\0\55\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u021c\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u040b\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u021c\0\u0d89\0\u0db6\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u021c"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u021c\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u021c\0\u1cd4\0\u1d01"+
    "\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u021c\0\u1e0f\0\u1e3c"+
    "\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u021c\0\u1f1d\0\u021c\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u1fd1\0\u021c\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u021c\0\u25f8"+
    "\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8"+
    "\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\u021c\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b"+
    "\0\u021c\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6"+
    "\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e"+
    "\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u021c\0\u021c\0\u2eef\0\u2f1c"+
    "\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084"+
    "\0\u30b1\0\u021c\0\u30de\0\u310b\0\u021c\0\u3138\0\u3165\0\u021c"+
    "\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u021c"+
    "\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408"+
    "\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u021c\0\u3516\0\u3543"+
    "\0\u3570\0\u359d\0\u021c\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e"+
    "\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u375f\0\u021c\0\u021c\0\u378c"+
    "\0\u37b9\0\u021c\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a\0\u38c7"+
    "\0\u38f4\0\u3921\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u3a2f"+
    "\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97"+
    "\0\u021c\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2"+
    "\0\u3cff\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u021c"+
    "\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u021c\0\u3f1b\0\u021c"+
    "\0\u3f48\0\u3f75\0\u3fa2\0\u021c\0\u3fcf\0\u3ffc\0\u4029\0\u4056"+
    "\0\u021c\0\u4083\0\u40b0\0\u40dd\0\u410a\0\u4137\0\u4164\0\u4191"+
    "\0\u41be\0\u41eb\0\u4218\0\u4245\0\u4272\0\u429f\0\u42cc\0\u42f9"+
    "\0\u4326\0\u4353\0\u4380\0\u43ad\0\u021c\0\u43da\0\u4407\0\u4434"+
    "\0\u4461\0\u448e\0\u44bb\0\u44e8\0\u4515\0\u4542\0\u456f\0\u021c"+
    "\0\u459c\0\u021c\0\u45c9\0\u45f6\0\u4623\0\u021c\0\u021c\0\u4650"+
    "\0\u467d\0\u46aa\0\u46d7\0\u4704\0\u4731\0\u475e\0\u478b\0\u47b8"+
    "\0\u47e5\0\u021c\0\u4812\0\u483f\0\u486c\0\u4899\0\u48c6\0\u48f3"+
    "\0\u4920\0\u494d\0\u021c\0\u021c\0\u497a\0\u49a7\0\u49d4\0\u4a01"+
    "\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5\0\u021c\0\u4ae2\0\u4b0f\0\u4b3c"+
    "\0\u4b69\0\u4b96\0\u021c\0\u021c\0\u4bc3\0\u4bf0\0\u4c1d\0\u021c"+
    "\0\u021c\0\u4c4a\0\u021c\0\u4c77\0\u4ca4\0\u4cd1\0\u4cfe\0\u4d2b"+
    "\0\u021c\0\u4d58\0\u021c\0\u4d85\0\u021c\0\u4db2\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\27\1\31\1\32\1\27\1\33\1\27\1\34"+
    "\1\35\1\36\1\27\1\37\1\40\2\27\1\41\1\27"+
    "\1\42\1\43\56\0\1\3\72\0\1\16\47\0\1\44"+
    "\1\13\54\0\1\27\4\0\1\27\1\45\1\46\14\27"+
    "\1\47\4\27\1\50\4\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\51\12\27\1\52\15\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\53\3\27\1\54\11\27\1\55\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\4\27\1\56\3\27"+
    "\1\57\20\27\1\0\1\27\15\0\1\27\4\0\13\27"+
    "\1\60\1\27\1\61\4\27\1\62\6\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\63\15\27\1\64\12\27\1\0"+
    "\1\27\15\0\1\27\4\0\24\27\1\65\4\27\1\0"+
    "\1\27\15\0\1\27\4\0\31\27\1\0\1\27\15\0"+
    "\1\27\4\0\5\27\1\66\6\27\1\67\1\70\13\27"+
    "\1\0\1\27\15\0\1\27\4\0\16\27\1\71\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\24\27\1\72\4\27"+
    "\1\0\1\27\15\0\1\27\4\0\1\73\30\27\1\0"+
    "\1\27\15\0\1\27\4\0\4\27\1\74\11\27\1\75"+
    "\12\27\1\0\1\27\15\0\1\27\4\0\7\27\1\76"+
    "\13\27\1\77\1\100\4\27\1\0\1\27\15\0\1\27"+
    "\4\0\7\27\1\101\14\27\1\102\4\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\103\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\7\27\1\104\21\27\1\0\1\27"+
    "\11\0\1\11\60\0\1\105\54\0\1\27\4\0\21\27"+
    "\1\106\7\27\1\0\1\27\15\0\1\27\4\0\23\27"+
    "\1\107\5\27\1\0\1\27\15\0\1\27\4\0\1\110"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\14\27\1\111"+
    "\14\27\1\0\1\27\15\0\1\27\4\0\11\27\1\112"+
    "\11\27\1\113\5\27\1\0\1\27\15\0\1\27\4\0"+
    "\16\27\1\114\12\27\1\0\1\27\15\0\1\27\4\0"+
    "\13\27\1\115\5\27\1\116\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\117\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\15\27\1\120\1\27\1\121\11\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\122\21\27\1\123\1\124"+
    "\5\27\1\0\1\27\15\0\1\27\4\0\22\27\1\125"+
    "\6\27\1\0\1\27\15\0\1\27\4\0\10\27\1\126"+
    "\11\27\1\127\6\27\1\0\1\27\15\0\1\27\4\0"+
    "\3\27\1\66\25\27\1\0\1\27\15\0\1\27\4\0"+
    "\2\27\1\130\14\27\1\131\3\27\1\132\5\27\1\0"+
    "\1\27\15\0\1\27\4\0\13\27\1\133\15\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\134\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\135\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\17\27\1\136\11\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\137\12\27\1\140\1\27"+
    "\1\141\3\27\1\0\1\27\15\0\1\27\4\0\25\27"+
    "\1\142\3\27\1\0\1\27\15\0\1\27\4\0\13\27"+
    "\1\143\15\27\1\0\1\27\15\0\1\27\4\0\24\27"+
    "\1\144\4\27\1\0\1\27\15\0\1\27\4\0\1\145"+
    "\5\27\1\146\1\27\1\147\4\27\1\150\4\27\1\151"+
    "\6\27\1\0\1\27\15\0\1\27\4\0\23\27\1\152"+
    "\5\27\1\0\1\27\15\0\1\27\4\0\24\27\1\153"+
    "\4\27\1\0\1\27\15\0\1\27\4\0\1\154\15\27"+
    "\1\155\12\27\1\0\1\27\15\0\1\27\4\0\1\27"+
    "\1\156\27\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\157\24\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\160\7\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\161\7\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\162\20\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\163\20\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\164\20\27\1\0\1\27\15\0\1\27\4\0\6\27"+
    "\1\165\22\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\166\24\27\1\0\1\27\15\0\1\27\4\0\1\167"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\4\27\1\170"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\20\27\1\171"+
    "\10\27\1\0\1\27\15\0\1\27\4\0\10\27\1\172"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\6\27\1\173"+
    "\22\27\1\0\1\27\15\0\1\27\4\0\21\27\1\174"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\23\27\1\175"+
    "\5\27\1\0\1\27\15\0\1\27\4\0\10\27\1\176"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\2\27\1\177"+
    "\26\27\1\0\1\27\15\0\1\27\4\0\1\200\1\201"+
    "\1\202\26\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\203\24\27\1\0\1\27\15\0\1\27\4\0\14\27"+
    "\1\204\14\27\1\0\1\27\15\0\1\27\4\0\14\27"+
    "\1\205\14\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\66\24\27\1\0\1\27\15\0\1\27\4\0\1\206"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\4\27\1\207"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\1\210\30\27"+
    "\1\0\1\27\15\0\1\27\4\0\22\27\1\211\6\27"+
    "\1\0\1\27\15\0\1\27\4\0\21\27\1\212\7\27"+
    "\1\0\1\27\15\0\1\27\4\0\21\27\1\213\7\27"+
    "\1\0\1\27\15\0\1\27\4\0\2\27\1\214\26\27"+
    "\1\0\1\27\15\0\1\27\4\0\4\27\1\215\24\27"+
    "\1\0\1\27\15\0\1\27\4\0\4\27\1\216\24\27"+
    "\1\0\1\27\15\0\1\27\4\0\4\27\1\217\24\27"+
    "\1\0\1\27\15\0\1\27\4\0\16\27\1\220\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\22\27\1\221\6\27"+
    "\1\0\1\27\15\0\1\27\4\0\3\27\1\222\15\27"+
    "\1\223\7\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\224\20\27\1\0\1\27\15\0\1\27\4\0\15\27"+
    "\1\225\13\27\1\0\1\27\15\0\1\27\4\0\16\27"+
    "\1\226\12\27\1\0\1\27\15\0\1\27\4\0\24\27"+
    "\1\227\4\27\1\0\1\27\15\0\1\27\4\0\1\230"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\23\27\1\231"+
    "\5\27\1\0\1\27\15\0\1\27\4\0\21\27\1\232"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\17\27\1\66"+
    "\11\27\1\0\1\27\15\0\1\27\4\0\10\27\1\233"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\15\27\1\66"+
    "\13\27\1\0\1\27\15\0\1\27\4\0\15\27\1\234"+
    "\13\27\1\0\1\27\15\0\1\27\4\0\3\27\1\235"+
    "\4\27\1\236\20\27\1\0\1\27\15\0\1\27\4\0"+
    "\13\27\1\237\15\27\1\0\1\27\15\0\1\27\4\0"+
    "\21\27\1\240\7\27\1\0\1\27\15\0\1\27\4\0"+
    "\25\27\1\241\3\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\242\30\27\1\0\1\27\15\0\1\27\4\0\15\27"+
    "\1\243\13\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\244\7\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\245\7\27\1\0\1\27\15\0\1\27\4\0\24\27"+
    "\1\246\4\27\1\0\1\27\15\0\1\27\4\0\1\27"+
    "\1\247\27\27\1\0\1\27\15\0\1\27\4\0\1\250"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\1\251\30\27"+
    "\1\0\1\27\15\0\1\27\4\0\10\27\1\252\20\27"+
    "\1\0\1\27\15\0\1\27\4\0\1\253\30\27\1\0"+
    "\1\27\15\0\1\27\4\0\23\27\1\254\5\27\1\0"+
    "\1\27\15\0\1\27\4\0\2\27\1\255\26\27\1\0"+
    "\1\27\15\0\1\27\4\0\13\27\1\256\15\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\257\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\15\27\1\260\13\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\261\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\262\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\15\27\1\263\13\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\264\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\27\1\265\27\27\1\0\1\27"+
    "\15\0\1\27\4\0\16\27\1\266\12\27\1\0\1\27"+
    "\15\0\1\27\4\0\3\27\1\267\25\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\270\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\271\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\272\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\273\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\274\7\27\1\0\1\275"+
    "\15\0\1\27\4\0\4\27\1\276\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\31\27\1\0\1\277\15\0\1\27"+
    "\4\0\21\27\1\300\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\22\27\1\301\6\27\1\0\1\27\15\0\1\27"+
    "\4\0\10\27\1\302\20\27\1\0\1\27\15\0\1\27"+
    "\4\0\14\27\1\303\14\27\1\0\1\27\15\0\1\27"+
    "\4\0\14\27\1\304\14\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\305\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\3\27\1\306\25\27\1\0\1\27\15\0\1\27"+
    "\4\0\23\27\1\307\5\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\310\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\31\27\1\0\1\311\15\0\1\27\4\0\1\312"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\5\27\1\313"+
    "\23\27\1\0\1\27\15\0\1\27\4\0\4\27\1\314"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\31\27\1\0"+
    "\1\315\15\0\1\27\4\0\1\316\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\317\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\23\27\1\320\5\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\321\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\322\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\323\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\324\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\325\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\15\27\1\326\13\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\327\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\330\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\23\27\1\331\5\27\1\0\1\27"+
    "\15\0\1\27\4\0\16\27\1\332\12\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\333\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\334\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\15\27\1\335\13\27\1\0\1\27"+
    "\15\0\1\27\4\0\15\27\1\336\13\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\337\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\340\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\13\27\1\341\15\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\342\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\14\27\1\343\14\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\344\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\21\27\1\345\7\27\1\0\1\27\15\0\1\27\4\0"+
    "\23\27\1\346\5\27\1\0\1\27\15\0\1\27\4\0"+
    "\31\27\1\0\1\347\15\0\1\27\4\0\1\27\1\350"+
    "\3\27\1\351\23\27\1\0\1\27\15\0\1\27\4\0"+
    "\22\27\1\352\6\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\353\30\27\1\0\1\27\15\0\1\27\4\0\23\27"+
    "\1\354\5\27\1\0\1\27\15\0\1\27\4\0\2\27"+
    "\1\355\26\27\1\0\1\27\15\0\1\27\4\0\1\27"+
    "\1\356\27\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\357\24\27\1\0\1\27\15\0\1\27\4\0\16\27"+
    "\1\360\12\27\1\0\1\27\15\0\1\27\4\0\31\27"+
    "\1\0\1\361\15\0\1\27\4\0\13\27\1\362\5\27"+
    "\1\363\7\27\1\0\1\27\15\0\1\27\4\0\3\27"+
    "\1\364\25\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\365\20\27\1\0\1\27\15\0\1\27\4\0\17\27"+
    "\1\366\11\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\367\1\27\1\370\5\27\1\0\1\27\15\0\1\27"+
    "\4\0\31\27\1\0\1\371\15\0\1\27\4\0\1\372"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\1\373\30\27"+
    "\1\0\1\27\15\0\1\27\4\0\1\374\30\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\375\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\31\27\1\0\1\376\15\0\1\27"+
    "\4\0\31\27\1\0\1\377\15\0\1\27\4\0\24\27"+
    "\1\u0100\4\27\1\0\1\27\15\0\1\27\4\0\31\27"+
    "\1\0\1\u0101\15\0\1\27\4\0\25\27\1\u0102\3\27"+
    "\1\0\1\27\15\0\1\27\4\0\10\27\1\u0103\20\27"+
    "\1\0\1\27\15\0\1\27\4\0\20\27\1\u0104\10\27"+
    "\1\0\1\27\15\0\1\27\4\0\6\27\1\u0105\22\27"+
    "\1\0\1\27\15\0\1\27\4\0\21\27\1\u0106\7\27"+
    "\1\0\1\27\15\0\1\27\4\0\24\27\1\u0107\4\27"+
    "\1\0\1\27\15\0\1\27\4\0\1\u0108\30\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u0109\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\u010a\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\u010b\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\u010c\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\u010d\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\13\27\1\u010e\15\27\1\0\1\27"+
    "\15\0\1\27\4\0\24\27\1\u010f\4\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\u0110\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u0111\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u0112\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\16\27\1\u0113\12\27\1\0\1\27\15\0\1\27"+
    "\4\0\4\27\1\u0114\24\27\1\0\1\27\15\0\1\27"+
    "\4\0\15\27\1\u0115\13\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0116\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\10\27\1\u0117\20\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0118\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\26\27\1\u0119\2\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u011a\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u011b\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\10\27\1\u011c\20\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u011d\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\2\27\1\u011e\26\27\1\0\1\27\15\0\1\27\4\0"+
    "\24\27\1\u011f\4\27\1\0\1\27\15\0\1\27\4\0"+
    "\31\27\1\0\1\u0120\15\0\1\27\4\0\4\27\1\u0121"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\2\27\1\u0122"+
    "\26\27\1\0\1\27\15\0\1\27\4\0\21\27\1\u0123"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\31\27\1\0"+
    "\1\u0124\15\0\1\27\4\0\21\27\1\u0125\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u0126\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\27\1\u0127\27\27\1\0"+
    "\1\27\15\0\1\27\4\0\17\27\1\u0128\11\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u0129\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u012a\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u012b\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\25\27\1\u012c\3\27\1\0\1\27\15\0\1\27"+
    "\4\0\24\27\1\u012d\4\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u012e\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\31\27\1\0\1\u012f\15\0\1\27\4\0\10\27\1\u0130"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\21\27\1\u0131"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\21\27\1\u0132"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\2\27\1\u0133"+
    "\26\27\1\0\1\27\15\0\1\27\4\0\31\27\1\0"+
    "\1\u0134\15\0\1\27\4\0\21\27\1\u0135\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\10\27\1\u0136\20\27\1\0"+
    "\1\27\15\0\1\27\4\0\14\27\1\u0137\14\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u0138\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\2\27\1\u0139\26\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u013a\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\15\27\1\u013b\13\27\1\0"+
    "\1\27\15\0\1\27\4\0\2\27\1\u013c\26\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u013d\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u013e\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u013f\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\15\27\1\u0140\13\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0141\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\5\27\1\u0142\23\27\1\0\1\27\15\0\1\27"+
    "\4\0\6\27\1\u0143\22\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0144\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u0145\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u0146\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\u0147\30\27\1\0\1\27\15\0\1\27\4\0\31\27"+
    "\1\0\1\u0148\15\0\1\27\4\0\16\27\1\u0149\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\31\27\1\0\1\u014a"+
    "\15\0\1\27\4\0\1\27\1\u014b\27\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u014c\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\24\27\1\u014d\4\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\u014e\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\u014f\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\23\27\1\u0150\5\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u0151\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\4\27\1\u0152\24\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0153\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\10\27\1\u0154\20\27\1\0\1\27\15\0\1\27"+
    "\4\0\21\27\1\u0155\7\27\1\0\1\27\15\0\1\27"+
    "\4\0\31\27\1\0\1\u0156\15\0\1\27\4\0\4\27"+
    "\1\u0157\24\27\1\0\1\27\15\0\1\27\4\0\1\u0158"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\30\27\1\u0159"+
    "\1\0\1\27\15\0\1\27\4\0\17\27\1\u015a\11\27"+
    "\1\0\1\27\15\0\1\27\4\0\12\27\1\u013a\16\27"+
    "\1\0\1\27\15\0\1\27\4\0\26\27\1\u015b\2\27"+
    "\1\0\1\27\15\0\1\27\4\0\22\27\1\u015c\6\27"+
    "\1\0\1\27\15\0\1\27\4\0\1\u015d\30\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u015e\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u015f\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u0160\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\2\27\1\u0161\26\27\1\0"+
    "\1\27\15\0\1\27\4\0\23\27\1\66\5\27\1\0"+
    "\1\27\15\0\1\27\4\0\7\27\1\u0142\21\27\1\0"+
    "\1\27\15\0\1\27\4\0\16\27\1\u0162\12\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u0163\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u0164\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\13\27\1\u0165\15\27\1\0"+
    "\1\27\15\0\1\27\4\0\22\27\1\u0166\6\27\1\0"+
    "\1\27\15\0\1\27\4\0\14\27\1\u0167\14\27\1\0"+
    "\1\27\15\0\1\27\4\0\25\27\1\u0168\3\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u0169\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\23\27\1\u016a\5\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\u016b\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\2\27\1\u016c\26\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\u016d\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\u016e\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u016f\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\15\27\1\u0170\13\27\1\0\1\27\15\0"+
    "\1\27\4\0\31\27\1\0\1\u0171\15\0\1\27\4\0"+
    "\1\u0172\30\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\u0173\7\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\u0174\7\27\1\0\1\27\15\0\1\27\4\0\1\u0175"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\10\27\1\u0176"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\1\u0177\30\27"+
    "\1\0\1\27\15\0\1\27\4\0\16\27\1\u0178\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\21\27\1\u0179\7\27"+
    "\1\0\1\27\15\0\1\27\4\0\31\27\1\0\1\u017a"+
    "\15\0\1\27\4\0\7\27\1\u017b\21\27\1\0\1\27"+
    "\15\0\1\27\4\0\31\27\1\0\1\u017c\15\0\1\27"+
    "\4\0\23\27\1\u017d\5\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u017e\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u017f\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\17\27\1\u0180\11\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u0181\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\11\27\1\u0182\17\27\1\0\1\27\15\0\1\27\4\0"+
    "\4\27\1\u0183\24\27\1\0\1\27\15\0\1\27\4\0"+
    "\21\27\1\u0184\7\27\1\0\1\27\15\0\1\27\4\0"+
    "\7\27\1\u0185\21\27\1\0\1\27\15\0\1\27\4\0"+
    "\31\27\1\0\1\u0186\15\0\1\27\4\0\31\27\1\0"+
    "\1\u0187\15\0\1\27\4\0\21\27\1\u0188\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\14\27\1\u0189\14\27\1\0"+
    "\1\27\15\0\1\27\4\0\25\27\1\u018a\3\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u018b\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\31\27\1\0\1\u018c\15\0"+
    "\1\27\4\0\2\27\1\u018d\26\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\u018e\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\u018f\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\61\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\21\27\1\u0190\7\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u0191\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\10\27\1\u0192\20\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\27\1\u0193\27\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u0194\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\21\27\1\u0195\7\27\1\0\1\27\15\0\1\27\4\0"+
    "\15\27\1\u0196\13\27\1\0\1\27\15\0\1\27\4\0"+
    "\13\27\1\u0197\15\27\1\0\1\27\15\0\1\27\4\0"+
    "\13\27\1\u0198\15\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\u0199\30\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\u019a\7\27\1\0\1\27\15\0\1\27\4\0\23\27"+
    "\1\u019b\5\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\u019c\20\27\1\0\1\27\15\0\1\27\4\0\22\27"+
    "\1\u019d\6\27\1\0\1\27\15\0\1\27\4\0\1\u019e"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\4\27\1\u019f"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\4\27\1\u01a0"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\2\27\1\u01a1"+
    "\26\27\1\0\1\27\15\0\1\27\4\0\25\27\1\u01a2"+
    "\3\27\1\0\1\27\15\0\1\27\4\0\7\27\1\u01a3"+
    "\21\27\1\0\1\27\15\0\1\27\4\0\31\27\1\0"+
    "\1\u01a4\15\0\1\27\4\0\21\27\1\u01a5\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\25\27\1\u01a6\3\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u01a7\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\14\27\1\u01a8\14\27\1\0\1\27"+
    "\15\0\1\27\4\0\22\27\1\u01a9\6\27\1\0\1\27"+
    "\15\0\1\27\4\0\4\27\1\u01aa\24\27\1\0\1\27"+
    "\15\0\1\27\4\0\16\27\1\u01ab\12\27\1\0\1\27"+
    "\15\0\1\27\4\0\10\27\1\u01ac\20\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u01ad\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\25\27\1\u01ae\3\27\1\0\1\27\15\0"+
    "\1\27\4\0\4\27\1\u01af\24\27\1\0\1\27\15\0"+
    "\1\27\4\0\13\27\1\u01b0\15\27\1\0\1\27\15\0"+
    "\1\27\4\0\3\27\1\u01b1\25\27\1\0\1\27\15\0"+
    "\1\27\4\0\13\27\1\u01b2\15\27\1\0\1\27\15\0"+
    "\1\27\4\0\7\27\1\u01b3\21\27\1\0\1\27\15\0"+
    "\1\27\4\0\4\27\1\u01b4\24\27\1\0\1\27\15\0"+
    "\1\27\4\0\10\27\1\u01b5\20\27\1\0\1\27\15\0"+
    "\1\27\4\0\13\27\1\u01b6\15\27\1\0\1\27\15\0"+
    "\1\27\4\0\2\27\1\u01b7\26\27\1\0\1\27\15\0"+
    "\1\27\4\0\16\27\1\u01b8\12\27\1\0\1\27\15\0"+
    "\1\27\4\0\23\27\1\u01b9\5\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u01ba\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\16\27\1\u01bb\12\27\1\0\1\27\15\0\1\27"+
    "\4\0\23\27\1\u01bc\5\27\1\0\1\27\15\0\1\27"+
    "\4\0\2\27\1\u01bd\26\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u01be\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\16\27\1\u01bf\12\27\1\0\1\27\15\0\1\27\4\0"+
    "\15\27\1\u01c0\13\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\u01c1\30\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\u01c2\20\27\1\0\1\27\15\0\1\27\4\0\16\27"+
    "\1\u01c3\12\27\1\0\1\27\15\0\1\27\4\0\10\27"+
    "\1\u01c4\20\27\1\0\1\27\15\0\1\27\4\0\13\27"+
    "\1\u01c5\15\27\1\0\1\27\15\0\1\27\4\0\25\27"+
    "\1\u01c6\3\27\1\0\1\27\15\0\1\27\4\0\24\27"+
    "\1\u01c7\4\27\1\0\1\27\15\0\1\27\4\0\7\27"+
    "\1\u01c8\21\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\u01c9\24\27\1\0\1\27\15\0\1\27\4\0\21\27"+
    "\1\u01ca\7\27\1\0\1\27\15\0\1\27\4\0\1\u01cb"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\10\27\1\u01cc"+
    "\20\27\1\0\1\27\15\0\1\27\4\0\22\27\1\u01cd"+
    "\6\27\1\0\1\27\15\0\1\27\4\0\21\27\1\u01ce"+
    "\7\27\1\0\1\27\15\0\1\27\4\0\1\u01cf\30\27"+
    "\1\0\1\27\15\0\1\27\4\0\2\27\1\u01d0\26\27"+
    "\1\0\1\27\15\0\1\27\4\0\25\27\1\u01d1\3\27"+
    "\1\0\1\27\15\0\1\27\4\0\16\27\1\u01d2\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\16\27\1\u01d3\12\27"+
    "\1\0\1\27\15\0\1\27\4\0\30\27\1\u01d4\1\0"+
    "\1\27\15\0\1\27\4\0\10\27\1\u01d5\20\27\1\0"+
    "\1\27\15\0\1\27\4\0\21\27\1\u01d6\7\27\1\0"+
    "\1\27\15\0\1\27\4\0\14\27\1\u01d7\14\27\1\0"+
    "\1\27\15\0\1\27\4\0\3\27\1\u01d8\25\27\1\0"+
    "\1\27\15\0\1\27\4\0\16\27\1\u01d9\12\27\1\0"+
    "\1\27\15\0\1\27\4\0\14\27\1\u01da\14\27\1\0"+
    "\1\27\15\0\1\27\4\0\23\27\1\u01db\5\27\1\0"+
    "\1\27\15\0\1\27\4\0\10\27\1\u01dc\20\27\1\0"+
    "\1\27\15\0\1\27\4\0\16\27\1\u01dd\12\27\1\0"+
    "\1\27\15\0\1\27\4\0\2\27\1\u01de\26\27\1\0"+
    "\1\27\15\0\1\27\4\0\25\27\1\u01df\3\27\1\0"+
    "\1\27\15\0\1\27\4\0\10\27\1\u01e0\20\27\1\0"+
    "\1\27\15\0\1\27\4\0\4\27\1\u01e1\24\27\1\0"+
    "\1\27\15\0\1\27\4\0\1\u01e2\30\27\1\0\1\27"+
    "\15\0\1\27\4\0\21\27\1\u01e3\7\27\1\0\1\27"+
    "\15\0\1\27\4\0\1\u01e4\30\27\1\0\1\27\15\0"+
    "\1\27\4\0\1\u01e5\30\27\1\0\1\27\15\0\1\27"+
    "\4\0\3\27\1\u01e6\25\27\1\0\1\27\15\0\1\27"+
    "\4\0\10\27\1\u01e7\20\27\1\0\1\27\15\0\1\27"+
    "\4\0\16\27\1\u01e8\12\27\1\0\1\27\15\0\1\27"+
    "\4\0\1\u01e9\30\27\1\0\1\27\15\0\1\27\4\0"+
    "\15\27\1\u01ea\13\27\1\0\1\27\15\0\1\27\4\0"+
    "\3\27\1\u01eb\25\27\1\0\1\27\15\0\1\27\4\0"+
    "\14\27\1\u01ec\14\27\1\0\1\27\15\0\1\27\4\0"+
    "\1\u01ed\30\27\1\0\1\27\15\0\1\27\4\0\3\27"+
    "\1\u01ee\25\27\1\0\1\27\15\0\1\27\4\0\23\27"+
    "\1\u01ef\5\27\1\0\1\27\15\0\1\27\4\0\4\27"+
    "\1\u01f0\24\27\1\0\1\27\15\0\1\27\4\0\3\27"+
    "\1\u01f1\25\27\1\0\1\27\15\0\1\27\4\0\1\u01f2"+
    "\30\27\1\0\1\27\15\0\1\27\4\0\4\27\1\u01f3"+
    "\24\27\1\0\1\27\15\0\1\27\4\0\15\27\1\u01f4"+
    "\13\27\1\0\1\27\15\0\1\27\4\0\3\27\1\u01f5"+
    "\25\27\1\0\1\27\15\0\1\27\4\0\23\27\1\u01f6"+
    "\5\27\1\0\1\27\15\0\1\27\4\0\4\27\1\u01f7"+
    "\24\27\1\0\1\27\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19935];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\4\11\1\1\3\11"+
    "\23\1\2\11\1\0\u01d3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private BufferedWriter writer;
private int lineNumber = 1; // Contador de líneas
private int columnNumber = 1; // Contador de columnas
private int cont = 0; // Contador de tokens procesados

// Tabla de palabras reservadas
private static final Map<String, String> palabrasReservadas = Map.of(
    "IF", "PALABRA_RESERVADA",
    "ELSE", "PALABRA_RESERVADA",
    "THEN", "PALABRA_RESERVADA",
    "MOVE_FORWARD", "PALABRA_RESERVADA",
    "MOVE_BACKWARD", "PALABRA_RESERVADA",
    "TURN_LEFT", "PALABRA_RESERVADA",
    "TURN_RIGHT", "PALABRA_RESERVADA",
    "STOP", "PALABRA_RESERVADA",
    "END", "PALABRA_RESERVADA"
);

public boolean isEOF() {
    return zzAtEOF;
}

public Lexerclass(Reader in, BufferedWriter writer) {
    this.zzReader = in;
    this.writer = writer;
}

// Escribe un token en el archivo de salida
private void escribeToken(String tipo, String lexema) {
    try {
        writer.write(cont + ": (" + tipo + ", \"" + lexema + "\") en línea " + lineNumber + ", columna " + columnNumber + "\n");
        columnNumber += yytext().length(); // Actualiza la columna según el tamaño del lexema
        cont++;
    } catch (IOException e) {
        e.printStackTrace();
    }
}

// Reporta un error en el archivo de salida
private void reportaError(String lexema, String mensaje) {
    try {
        writer.write(cont + ": ERROR: Línea " + lineNumber + ", Columna " + columnNumber + ": " + mensaje + " '" + lexema + "'\n");
        columnNumber += lexema.length(); // Actualiza la columna
        cont++;
    } catch (IOException e) {
        e.printStackTrace();
    }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexerclass(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { reportaError(yytext(), "Símbolo desconocido");
            }
          // fall through
          case 66: break;
          case 2:
            { columnNumber += yylength(); /* Ignorar espacios */
            }
          // fall through
          case 67: break;
          case 3:
            { lineNumber++; columnNumber = 1;
            }
          // fall through
          case 68: break;
          case 4:
            { System.out.print(yytext());
            }
          // fall through
          case 69: break;
          case 5:
            { escribeToken(yytext(), "PARENTESIS_ABIERTO");
            }
          // fall through
          case 70: break;
          case 6:
            { escribeToken(yytext(), "PARENTESIS_CERRADO");
            }
          // fall through
          case 71: break;
          case 7:
            { escribeToken("OPERADOR_ARITMETICO", yytext());
            }
          // fall through
          case 72: break;
          case 8:
            { escribeToken(yytext(), "COMA");
            }
          // fall through
          case 73: break;
          case 9:
            { escribeToken("NUMERO", yytext());
            }
          // fall through
          case 74: break;
          case 10:
            { escribeToken(yytext(), "DOS_PUNTOS");
            }
          // fall through
          case 75: break;
          case 11:
            { escribeToken(yytext(), "PUNTO_Y_COMA");
            }
          // fall through
          case 76: break;
          case 12:
            { escribeToken("OPERADOR_RELACIONAL", yytext());
            }
          // fall through
          case 77: break;
          case 13:
            { escribeToken("OPERADOR_ASIGNACION", yytext());
            }
          // fall through
          case 78: break;
          case 14:
            { if (palabrasReservadas.containsKey(yytext())) {
        escribeToken(palabrasReservadas.get(yytext()), yytext());
    } else {
        escribeToken("IDENTIFICADOR", yytext());
    }
            }
          // fall through
          case 79: break;
          case 15:
            { escribeToken(yytext(), "LLAVE_ABIERTA");
            }
          // fall through
          case 80: break;
          case 16:
            { escribeToken(yytext(), "LLAVE_CERRADA");
            }
          // fall through
          case 81: break;
          case 17:
            { escribeToken("PALABRA_RESERVADA", yytext());
            }
          // fall through
          case 82: break;
          case 18:
            { escribeToken(yytext(), "FOR");
            }
          // fall through
          case 83: break;
          case 19:
            { escribeToken(yytext(), "NULO");
            }
          // fall through
          case 84: break;
          case 20:
            { escribeToken(yytext(), "BAJAR");
            }
          // fall through
          case 85: break;
          case 21:
            { escribeToken(yytext(), "FALSO");
            }
          // fall through
          case 86: break;
          case 22:
            { escribeToken(yytext(), "PAUSE");
            }
          // fall through
          case 87: break;
          case 23:
            { escribeToken(yytext(), "ROTAR");
            }
          // fall through
          case 88: break;
          case 24:
            { escribeToken(yytext(), "START");
            }
          // fall through
          case 89: break;
          case 25:
            { escribeToken(yytext(), "SUBIR");
            }
          // fall through
          case 90: break;
          case 26:
            { escribeToken(yytext(), "WHILE");
            }
          // fall through
          case 91: break;
          case 27:
            { escribeToken(yytext(), "RESUME");
            }
          // fall through
          case 92: break;
          case 28:
            { escribeToken(yytext(), "ESPERAR");
            }
          // fall through
          case 93: break;
          case 29:
            { escribeToken(yytext(), "MOVER_A");
            }
          // fall through
          case 94: break;
          case 30:
            { escribeToken(yytext(), "BLOQUEAR");
            }
          // fall through
          case 95: break;
          case 31:
            { escribeToken(yytext(), "CALIBRAR");
            }
          // fall through
          case 96: break;
          case 32:
            { escribeToken(yytext(), "ESCANEAR");
            }
          // fall through
          case 97: break;
          case 33:
            { escribeToken(yytext(), "IMPRIMIR");
            }
          // fall through
          case 98: break;
          case 34:
            { escribeToken(yytext(), "INVERTIR");
            }
          // fall through
          case 99: break;
          case 35:
            { escribeToken(yytext(), "SHUTDOWN");
            }
          // fall through
          case 100: break;
          case 36:
            { escribeToken(yytext(), "CONTINUAR");
            }
          // fall through
          case 101: break;
          case 37:
            { escribeToken(yytext(), "DESCARGAR");
            }
          // fall through
          case 102: break;
          case 38:
            { escribeToken(yytext(), "REGISTRAR");
            }
          // fall through
          case 103: break;
          case 39:
            { escribeToken(yytext(), "REINICIAR");
            }
          // fall through
          case 104: break;
          case 40:
            { escribeToken(yytext(), "VERDADERO");
            }
          // fall through
          case 105: break;
          case 41:
            { escribeToken(yytext(), "REARRANCAR");
            }
          // fall through
          case 106: break;
          case 42:
            { escribeToken(yytext(), "DESBLOQUEAR");
            }
          // fall through
          case 107: break;
          case 43:
            { escribeToken(yytext(), "INICIALIZAR");
            }
          // fall through
          case 108: break;
          case 44:
            { escribeToken(yytext(), "INTERRUMPIR");
            }
          // fall through
          case 109: break;
          case 45:
            { escribeToken(yytext(), "READ_SENSOR");
            }
          // fall through
          case 110: break;
          case 46:
            { escribeToken(yytext(), "ABRIR_PUERTA");
            }
          // fall through
          case 111: break;
          case 47:
            { escribeToken(yytext(), "BATERIA_BAJA");
            }
          // fall through
          case 112: break;
          case 48:
            { escribeToken(yytext(), "CERRAR_PUERTA");
            }
          // fall through
          case 113: break;
          case 49:
            { escribeToken(yytext(), "SUBIR_ARCHIVO");
            }
          // fall through
          case 114: break;
          case 50:
            { escribeToken(yytext(), "ACTIVAR_ALARMA");
            }
          // fall through
          case 115: break;
          case 51:
            { escribeToken(yytext(), "CARGAR_BATERIA");
            }
          // fall through
          case 116: break;
          case 52:
            { escribeToken(yytext(), "COPIAR_ARCHIVO");
            }
          // fall through
          case 117: break;
          case 53:
            { escribeToken(yytext(), "ACTIVATE_SENSOR");
            }
          // fall through
          case 118: break;
          case 54:
            { escribeToken(yytext(), "GUARDAR_ARCHIVO");
            }
          // fall through
          case 119: break;
          case 55:
            { escribeToken(yytext(), "INTERRUMPIR_LUZ");
            }
          // fall through
          case 120: break;
          case 56:
            { escribeToken(yytext(), "ELIMINAR_ARCHIVO");
            }
          // fall through
          case 121: break;
          case 57:
            { escribeToken(yytext(), "DEACTIVATE_SENSOR");
            }
          // fall through
          case 122: break;
          case 58:
            { escribeToken(yytext(), "DESACTIVAR_ALARMA");
            }
          // fall through
          case 123: break;
          case 59:
            { escribeToken(yytext(), "RENOMBRAR_ARCHIVO");
            }
          // fall through
          case 124: break;
          case 60:
            { escribeToken(yytext(), "VERIFICAR_BATERIA");
            }
          // fall through
          case 125: break;
          case 61:
            { escribeToken(yytext(), "AUMENTAR_VELOCIDAD");
            }
          // fall through
          case 126: break;
          case 62:
            { escribeToken(yytext(), "DISMINUIR_VELOCIDAD");
            }
          // fall through
          case 127: break;
          case 63:
            { escribeToken(yytext(), "APAGAR_COMPLETAMENTE");
            }
          // fall through
          case 128: break;
          case 64:
            { escribeToken(yytext(), "ESTABLECER_VELOCIDAD");
            }
          // fall through
          case 129: break;
          case 65:
            { escribeToken(yytext(), "DETENER_INMEDIATAMENTE");
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexerclass [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexerclass scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexerclass(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
